// Code generated by go-bindata. DO NOT EDIT.
// sources:
// vim_template/frameworks/vuejs/vuejs.bundle
// vim_template/frameworks/vuejs/vuejs.vim
// vim_template/langs/c/c.bundle
// vim_template/langs/c/c.vim
// vim_template/langs/elixir/elixir.bundle
// vim_template/langs/elixir/elixir.vim
// vim_template/langs/elm/elm.bundle
// vim_template/langs/elm/elm.vim
// vim_template/langs/erlang/erlang.bundle
// vim_template/langs/erlang/erlang.vim
// vim_template/langs/go/go.bundle
// vim_template/langs/go/go.vim
// vim_template/langs/haskell/haskell.bundle
// vim_template/langs/haskell/haskell.sh
// vim_template/langs/haskell/haskell.vim
// vim_template/langs/html/html.bundle
// vim_template/langs/html/html.vim
// vim_template/langs/javascript/javascript.bundle
// vim_template/langs/javascript/javascript.vim
// vim_template/langs/lisp/lisp.bundle
// vim_template/langs/lisp/lisp.vim
// vim_template/langs/lua/lua.bundle
// vim_template/langs/lua/lua.vim
// vim_template/langs/ocaml/ocaml.bundle
// vim_template/langs/ocaml/ocaml.vim
// vim_template/langs/perl/perl.bundle
// vim_template/langs/perl/perl.vim
// vim_template/langs/php/php.bundle
// vim_template/langs/php/php.vim
// vim_template/langs/python/python.bundle
// vim_template/langs/python/python.vim
// vim_template/langs/ruby/ruby.bundle
// vim_template/langs/ruby/ruby.vim
// vim_template/langs/rust/rust.bundle
// vim_template/langs/rust/rust.vim
// vim_template/langs/scala/scala.bundle
// vim_template/langs/scala/scala.vim
// vim_template/langs/typescript/typescript.bundle
// vim_template/langs/typescript/typescript.vim
// vim_template/themes/codedark/codedark.bundle
// vim_template/themes/codedark/codedark.vim
// vim_template/themes/dracula/dracula.bundle
// vim_template/themes/dracula/dracula.vim
// vim_template/themes/molokai/molokai.bundle
// vim_template/themes/molokai/molokai.vim
// vim_template/vimrc
// vim_template/vimrc.local.bundles.example
// vim_template/vimrc.local.example

package generate


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataVimtemplateFrameworksVuejsVuejsBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x2f\xc8\x2f\x2e\x4b\xd4\x2f\xcb\xcc\xd5\x2d\x2b\x4d\x55\xe7\x82\x08\xe6\xa4\x26\xa6\xf9\xa7\x85\x14\xa5\xa6\xc2\x64\x74\x0b\x72\x4a\xd3\x33\xf3\xd4\xb9\xb8\x00\x01\x00\x00\xff\xff\xda\xf2\x46\xb0\x37\x00\x00\x00")

func bindataVimtemplateFrameworksVuejsVuejsBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateFrameworksVuejsVuejsBundle,
		"vim_template/frameworks/vuejs/vuejs.bundle",
	)
}



func bindataVimtemplateFrameworksVuejsVuejsBundle() (*asset, error) {
	bytes, err := bindataVimtemplateFrameworksVuejsVuejsBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/frameworks/vuejs/vuejs.bundle",
		size: 55,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateFrameworksVuejsVuejsVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x28\xcb\xcc\x55\x28\x2b\x4d\xe5\xca\x49\x2d\x51\x48\xb7\x2a\x2b\x4d\x8d\x4f\xc9\x2c\x4e\x4c\xca\x49\x8d\x2f\x28\x02\xe1\xfc\xe4\xd4\xe2\xe2\xfc\xa2\x62\x5b\x43\x2e\xb8\x62\x85\x82\x9c\xd2\xf4\xcc\x3c\x98\x9e\xcc\xdc\x78\x90\x3e\x88\x60\x7c\x4e\x7e\x62\x4a\x7c\x5a\x69\x4e\x4e\x7c\x71\x65\x5e\x49\x62\x85\x82\xad\x82\x21\x17\x20\x00\x00\xff\xff\x79\x7b\x08\x67\x68\x00\x00\x00")

func bindataVimtemplateFrameworksVuejsVuejsVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateFrameworksVuejsVuejsVim,
		"vim_template/frameworks/vuejs/vuejs.vim",
	)
}



func bindataVimtemplateFrameworksVuejsVuejsVim() (*asset, error) {
	bytes, err := bindataVimtemplateFrameworksVuejsVuejsVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/frameworks/vuejs/vuejs.vim",
		size: 104,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsCCBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6\x4f\xd6\x2b\xcb\xcc\x55\xd7\x51\xa8\x56\x4f\xcb\x2f\x52\xb7\x52\x88\x56\x4f\x56\xd7\x51\x50\x4f\x2e\x28\x50\x8f\xad\xe5\x82\xa8\xcf\x29\x4d\x29\xcf\x4c\xd7\x2f\x2e\xc8\xc9\x2c\xd1\xcd\x4d\xcc\x2b\x48\x4c\x4f\x05\x6b\xe3\x02\x04\x00\x00\xff\xff\x31\xce\x53\x1e\x50\x00\x00\x00")

func bindataVimtemplateLangsCCBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsCCBundle,
		"vim_template/langs/c/c.bundle",
	)
}



func bindataVimtemplateLangsCCBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsCCBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/c/c.bundle",
		size: 80,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsCCVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\x2d\xc9\x4f\xce\x4d\x51\x70\xcb\xcc\x49\x0d\xa9\x2c\x48\x55\x48\x56\x28\x4e\x2d\xc9\xc9\x4f\x4e\xcc\x51\x28\x49\x4c\x2a\x2e\xc9\x2f\xb0\x35\x51\x28\xce\xc8\x4c\x2b\x29\xcf\x4c\x29\xc9\xb0\x35\x51\x48\xad\x28\x48\xcc\x4b\x29\x49\x4c\xe2\xc2\xd4\x5c\x50\x40\x82\x76\x40\x00\x00\x00\xff\xff\x6c\x20\xcb\xdc\x7c\x00\x00\x00")

func bindataVimtemplateLangsCCVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsCCVim,
		"vim_template/langs/c/c.vim",
	)
}



func bindataVimtemplateLangsCCVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsCCVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/c/c.vim",
		size: 124,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElixirElixirBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x4f\xcd\xc9\xac\xc8\x2c\xd2\xcd\x49\xcc\x4b\xd7\x2f\xcb\xcc\xd5\x85\xf0\xd5\xb9\x20\xb2\xc9\x89\x45\x39\xf9\xc5\xe9\x89\x39\x29\x99\x79\xf9\xfa\x50\xb5\xc5\x79\x99\x05\x05\xa9\x25\xc5\xea\x5c\x80\x00\x00\x00\xff\xff\x2d\x52\x6c\x8c\x43\x00\x00\x00")

func bindataVimtemplateLangsElixirElixirBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElixirElixirBundle,
		"vim_template/langs/elixir/elixir.bundle",
	)
}



func bindataVimtemplateLangsElixirElixirBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElixirElixirBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elixir/elixir.bundle",
		size: 67,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElixirElixirVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsElixirElixirVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElixirElixirVim,
		"vim_template/langs/elixir/elixir.vim",
	)
}



func bindataVimtemplateLangsElixirElixirVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElixirElixirVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elixir/elixir.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElmElmBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcd\xc9\x55\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\x4f\xcd\xc9\x4d\x4e\x2c\x2e\xd1\x4f\xcd\xc9\xd5\x2d\xcb\xcc\x55\xe7\x02\x04\x00\x00\xff\xff\xef\x8a\x4d\x83\x25\x00\x00\x00")

func bindataVimtemplateLangsElmElmBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElmElmBundle,
		"vim_template/langs/elm/elm.bundle",
	)
}



func bindataVimtemplateLangsElmElmBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElmElmBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elm/elm.bundle",
		size: 37,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElmElmVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\xe8\xa6\xab\x82\x6e\x85\x9c\x44\x24\xa4\xe4\x19\x06\x67\x9a\x62\xa6\x81\xde\xde\x8d\x82\xcb\x9f\xff\x9b\x40\xb5\x65\x88\x05\xa5\xa3\xde\xa8\x96\x3a\xfd\xd8\xd3\x8b\xe7\x2a\x5b\x91\xad\x76\x44\x5c\xfe\xfe\xb3\xbd\x2d\x7b\xca\x87\xb7\x9e\x07\x11\x71\x0d\x61\xc2\x10\x5b\xf6\xa6\x67\xd5\xe6\x5f\xfd\xcb\x54\xa4\xe7\x55\x59\x10\x71\x9f\xa9\x36\x3f\xc2\x27\x00\x00\xff\xff\x17\x95\x0e\xa2\x7a\x00\x00\x00")

func bindataVimtemplateLangsElmElmVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElmElmVim,
		"vim_template/langs/elm/elm.vim",
	)
}



func bindataVimtemplateLangsElmElmVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElmElmVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elm/elm.vim",
		size: 122,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsErlangErlangBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\xcf\xca\xcc\x4d\xcd\x4b\xad\x2a\xca\x4c\xce\xd6\x2f\xcb\xcc\x4d\x2d\xca\x51\xe7\x02\x04\x00\x00\xff\xff\x84\x19\x0a\xa2\x1a\x00\x00\x00")

func bindataVimtemplateLangsErlangErlangBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsErlangErlangBundle,
		"vim_template/langs/erlang/erlang.bundle",
	)
}



func bindataVimtemplateLangsErlangErlangBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsErlangErlangBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/erlang/erlang.bundle",
		size: 26,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsErlangErlangVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x49\x2d\x51\x48\x2d\xca\x49\xcc\x4b\x8f\x4f\xcb\xcf\x49\xc9\xcc\x4b\x57\xb0\x55\x30\xe4\x42\x12\x2e\xce\xc8\x2f\x8f\x4f\x2d\x2a\xca\x2f\x2a\x06\x4b\x01\x02\x00\x00\xff\xff\xb5\xe4\x0c\x62\x32\x00\x00\x00")

func bindataVimtemplateLangsErlangErlangVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsErlangErlangVim,
		"vim_template/langs/erlang/erlang.vim",
	)
}



func bindataVimtemplateLangsErlangErlangVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsErlangErlangVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/erlang/erlang.vim",
		size: 50,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsGoGoBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\xde\x53\x7c\xa5\xb9\x06\x94\x3e\x65\x9a\x08\x89\x82\x15\x4e\xf8\xe3\x58\x5c\x7c\x88\x38\x14\x20\xef\x4e\xe3\x01\xde\x30\x60\x71\x5c\xb5\x24\xcc\x47\x89\xc6\x70\xb3\x23\x41\x1e\x5a\xf3\x3a\x7e\xf2\x76\x4e\x2e\x27\xfc\x24\xba\x4c\x90\x69\xf1\x4b\xd9\xab\x9a\xcd\xb9\xe8\x3b\x73\x97\xd6\xc5\xf7\xbe\x92\x63\xa4\xbf\x8c\x95\x9d\xa1\xbb\x4d\x9f\x14\xb4\x10\xfe\x01\x00\x00\xff\xff\x82\x9e\x25\x3d\x70\x00\x00\x00")

func bindataVimtemplateLangsGoGoBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsGoGoBundle,
		"vim_template/langs/go/go.bundle",
	)
}



func bindataVimtemplateLangsGoGoBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsGoGoBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/go/go.bundle",
		size: 112,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600211104, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsGoGoVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x96\x51\x6f\xe3\x44\x10\xc7\xdf\xfd\x29\x26\x09\xd4\xe9\x91\x9c\x7a\x02\x04\x44\x89\x25\xae\x05\x84\x84\x4e\xe8\x5a\xf1\x42\xc1\x5a\xef\x8e\xd7\x2b\xd6\x3b\x66\x77\x9c\xb4\xa2\xdc\x67\x47\x6b\xbb\x69\xae\xd4\x97\xbc\x44\xf1\xce\xff\xf7\x9f\x99\xf5\x8e\xed\x29\x6c\x4d\xbd\xd4\x94\x4c\xc1\xb7\x0e\x56\x3f\xd1\xdb\xd6\x58\x05\xe4\xe3\xff\x1b\x0c\x7c\x49\x75\x63\x2c\x42\x21\x02\x2a\x20\x07\x5c\x21\x68\x82\xd2\x58\x4c\xca\xd6\x49\x36\xe4\x26\x10\x56\x45\x04\x73\x4d\x79\x8c\x84\xf9\x79\x02\x60\x91\xc1\xae\xe2\x35\x6c\x00\xef\x1a\xe1\xd4\x3c\xfd\x3c\x8d\x21\x53\xee\x23\x1f\x66\x90\xfe\x79\x5b\xde\x7e\x91\x33\x06\xbe\x7d\xad\xe9\xb3\x34\x01\x00\x90\xc2\x5a\xd0\x34\x8b\xcb\xb3\x58\xcb\xfc\x62\x01\x6f\x22\x8d\x36\xe0\x4b\x0e\x2f\xc0\xb2\x56\xb3\xae\xa7\xf9\x45\x47\x3a\x65\xca\x04\x9d\x7a\x2c\x3d\x49\x62\x95\x7a\xa5\x29\x57\x58\xe6\x35\xa9\x58\xec\x54\x53\x63\xc3\x74\x88\x29\xa4\xc6\x22\xe3\x0c\x9d\x28\x2c\xe6\x82\xf3\xc0\xc2\x73\xdb\xc0\x06\xde\x1c\x38\x58\x13\x38\xe7\xfb\xa6\xb3\xf8\xbb\x35\xf2\xaf\xd2\xdc\x4d\x9f\xe2\x65\xcd\xb9\xa4\xba\x16\x4e\xf5\x49\x4c\xdd\x90\xe7\xf0\x4c\x52\x0a\x63\xf3\x60\x2c\x3a\xb6\xf7\xcf\x52\x54\x46\x57\xd6\xe8\xaa\xcf\x13\xba\xe8\x0b\xc1\xd2\xa0\x55\xe3\xd1\xa1\xf9\x51\x41\x8d\x5c\xd1\x38\x4f\x0d\x7a\xc1\xe4\x47\x05\xfd\x61\x90\xe4\x02\x7b\x61\x1c\x8f\x0a\x03\xfb\x56\x8e\x87\x35\xba\x98\x09\x73\x16\x7a\xdc\xa3\x11\x32\x2a\x8a\x1c\xbd\x27\x0f\x1b\xb8\x78\x49\x26\xbc\x17\xf7\xf9\xae\x32\x8c\x3d\xf1\x49\x75\xac\xdb\x1a\xa7\x4f\x06\xf0\x8e\xbd\x38\xb8\x29\x89\x68\x99\x64\xad\xe0\x6d\x5b\xbe\xc3\xdd\x8f\xc6\xe2\xe2\x6d\x5b\xbe\x47\xa1\xe0\xd5\x6b\x4d\x10\x90\x2d\x49\x61\xc1\x51\x3f\x1b\x2c\x0a\x60\x51\x04\xa6\x66\xf3\x15\x84\xca\x94\xbc\x33\x8a\xab\x78\x41\x25\xef\x43\xd1\x5a\x7b\x6a\x1b\x90\x54\xc7\x83\x69\xc8\xe5\x8d\xc7\xad\xc1\x5d\x2e\x2d\x05\x4c\x00\x86\xec\x93\x7e\xd6\xb6\xab\x2d\xfa\x60\xc8\x41\x06\xdf\x5c\x7c\x09\x0f\x0f\x07\x4b\x9b\x4d\xb7\x76\x76\x06\x95\x08\xf3\xb4\x11\x2c\xab\xaf\xbf\xfb\xb6\x9b\xd3\xbd\x11\x5c\xf6\xb9\xf0\x8a\x1c\xc2\xab\x68\x3a\x39\x1b\x92\xee\x8c\x53\xb4\x8b\x06\x67\x43\x45\x48\x0d\xc3\xe6\x03\xa4\x83\x22\x85\x07\xe8\x0f\xf4\x04\x9a\xae\x44\x78\x18\x66\xf1\x71\x26\x1f\x7b\xfa\xe1\xdd\xd5\x53\x83\x9a\x92\xae\x97\x49\xf7\x0b\x71\x13\xbb\xf1\xd2\x04\xc3\x1c\x4d\x60\x59\x08\xa7\xe1\xfb\xfd\xc4\x0b\xcb\xe8\x9d\x60\x9c\x5d\xef\x0c\xcb\x6a\xbe\x8e\x82\xec\x62\x01\x29\x2a\xc3\x5d\x5b\x47\xbc\x7e\x3b\xc5\x6c\x1b\x1a\x7b\x9a\xdd\xf5\x29\x76\x27\xbb\xdd\x9c\xe2\xc6\xa2\xc0\xf4\x3c\x79\x72\xbb\x19\xdc\x5c\x2d\x1a\x58\xff\x82\x42\xa1\xcf\x94\x82\xf5\xaf\xb6\xd5\xd9\x5c\xd3\x52\x61\xb9\xdc\xa2\x67\x23\x85\x3d\x3f\x06\x6e\x0f\x41\x92\xa7\x83\xc5\x33\xb0\xf0\xb4\x0b\xe8\xc7\x4b\xb5\x3d\xe8\xe1\x00\xf4\xad\x1b\x4d\x34\xe8\xf9\x50\x1f\xdf\x20\xc7\x2a\xd3\x7c\x00\x48\xda\xa2\x17\x1a\x97\x4c\x5a\x5b\x3c\xc6\x9a\x03\xd4\xb8\x92\x46\xf5\xfd\x0c\x64\x7b\xd0\x1e\x80\x35\xb2\xb0\xc6\x71\xdc\x8c\x11\xfc\x72\xa9\xb3\xf8\x62\xbe\x42\x69\xc3\x5a\xfa\xec\xc8\x26\x28\xbf\x57\x5f\x19\xff\x32\x60\x9e\x9c\xd7\x18\x64\xb6\x5a\x5f\x2e\xdb\xec\x93\x39\xcc\xb3\x1c\xff\xe7\x46\xb3\x7d\x7c\x4f\x0b\xe8\xa9\xee\x40\xaf\xaf\x7f\xbe\xca\x9e\x7f\x45\xac\x2f\xdf\x67\xc9\xc7\xcf\x86\x29\x08\x8b\xc9\xaa\x63\xf0\x8e\xd1\xa9\xb9\x5e\x09\x8b\x79\xbf\x79\x61\x01\xff\x74\x0f\xae\xdb\xa9\xa6\xe9\x0a\x7e\x4f\x35\xc5\x48\xba\x80\x54\x13\x6c\x91\xd3\x3f\x16\xf0\xef\x79\xf2\x5f\x00\x00\x00\xff\xff\xbc\x7c\x27\x37\xfc\x08\x00\x00")

func bindataVimtemplateLangsGoGoVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsGoGoVim,
		"vim_template/langs/go/go.vim",
	)
}



func bindataVimtemplateLangsGoGoVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsGoGoVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/go/go.vim",
		size: 2300,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600211424, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x48\x2c\xce\x4e\xcd\xc9\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\x4f\x4d\x4c\xcf\x49\x2d\xc9\x2d\xd1\xcf\x4b\x4d\xce\xd7\x4d\xcf\x48\x56\x87\x4a\xa4\x24\xa6\xeb\x97\x65\xe6\x1a\x65\x14\xc3\x44\x0a\x92\x8a\x32\x8b\x93\x32\xf3\x40\xc2\xba\xc5\x95\x79\x25\x89\x15\xba\xc5\x19\x89\xd9\xa9\xc5\x05\xa9\x89\x45\xa9\xea\x5c\x80\x00\x00\x00\xff\xff\x16\x11\x04\x3a\x64\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellBundle,
		"vim_template/langs/haskell/haskell.bundle",
	)
}



func bindataVimtemplateLangsHaskellHaskellBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.bundle",
		size: 100,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c\xce\xe0\x02\x04\x00\x00\xff\xff\x06\xce\x4e\xf4\x14\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellShBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellSh,
		"vim_template/langs/haskell/haskell.sh",
	)
}



func bindataVimtemplateLangsHaskellHaskellSh() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.sh",
		size: 20,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x41\xaa\xc2\x50\x0c\x85\xe1\x79\x57\x11\x78\x2b\x78\x53\xa1\x53\xb7\x11\xd2\xdc\x63\x1b\x4c\x13\xe9\x4d\x29\xee\xde\x81\x15\x74\x7a\xce\xcf\xe7\x28\x9a\x2f\x8b\xf4\x3b\xdc\x59\x33\x14\xe2\x7c\x58\x03\x8d\xf4\x3f\xfc\xde\xeb\xee\x65\x6e\x01\xee\xb5\x59\xcc\xfd\xab\x09\x68\xce\x8b\x32\x42\x26\x07\x37\x94\x98\xa3\xf1\xb4\xe5\xd1\xdf\x98\xec\x95\xba\x36\xba\x9a\xa3\x9e\x0f\xd0\xe9\x52\x47\x79\xaa\x38\xe5\x1a\x76\xdb\x43\xc7\x53\xfb\xfb\x0c\xc3\x2b\x00\x00\xff\xff\x37\x29\x51\xc7\xa8\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellVim,
		"vim_template/langs/haskell/haskell.vim",
	)
}



func bindataVimtemplateLangsHaskellHaskellVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.vim",
		size: 168,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHtmlHtmlBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x08\xf1\xf5\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\xcf\x48\xcc\xcc\x31\x2a\xd5\x2f\xcb\xcc\xd5\x4d\x2e\x2e\x36\xd6\x2d\xae\xcc\x2b\x49\xac\x50\x87\xca\xa6\x67\xe7\x43\xa4\xf2\x73\xf2\x8b\x52\x8b\x0b\x4b\x53\x61\x32\x25\x05\xf9\x05\xa9\x60\xb9\x8c\xc4\xdc\x1c\x98\x68\x6e\x62\x49\x49\x9e\x7e\x6a\x6e\x6e\x6a\x89\x6e\x59\x66\xae\x3a\x17\x20\x00\x00\xff\xff\x74\xc1\xbe\x82\x74\x00\x00\x00")

func bindataVimtemplateLangsHtmlHtmlBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHtmlHtmlBundle,
		"vim_template/langs/html/html.bundle",
	)
}



func bindataVimtemplateLangsHtmlHtmlBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHtmlHtmlBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/html/html.bundle",
		size: 116,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHtmlHtmlVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x31\x0e\x84\x20\x10\x05\xd0\x9e\x53\xfc\x6c\xbd\x15\x3d\xad\xf7\x18\x61\x88\x24\x83\x10\xe7\x1b\xf5\xf6\x16\xf6\xef\x87\x3a\x0e\x6c\xec\x86\xda\x4c\xfd\x8f\x08\x9f\x92\xd5\x83\x9c\x1c\xb9\x17\x2c\xcd\x94\xcf\xd4\x4f\xb9\xd2\x46\x16\x03\x3d\x45\xf8\x95\x22\xf4\x9e\xb2\x17\xca\x1a\xde\x00\x00\x00\xff\xff\x79\xb0\x6e\xfa\x4e\x00\x00\x00")

func bindataVimtemplateLangsHtmlHtmlVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHtmlHtmlVim,
		"vim_template/langs/html/html.vim",
	)
}



func bindataVimtemplateLangsHtmlHtmlVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHtmlHtmlVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/html/html.vim",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsJavascriptJavascriptBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x4a\x2c\x4b\x2c\x4e\x2e\xca\x2c\x28\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\xcf\x4a\xcd\x49\x2d\x4a\xd4\x2f\xcb\xcc\xd5\xcd\x82\x2b\xd1\x2d\xae\xcc\x2b\x49\xac\x50\xe7\x02\x04\x00\x00\xff\xff\x00\x2b\xe6\xb7\x39\x00\x00\x00")

func bindataVimtemplateLangsJavascriptJavascriptBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsJavascriptJavascriptBundle,
		"vim_template/langs/javascript/javascript.bundle",
	)
}



func bindataVimtemplateLangsJavascriptJavascriptBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsJavascriptJavascriptBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/javascript/javascript.bundle",
		size: 57,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsJavascriptJavascriptVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\x31\x0b\xc2\x30\x10\x85\xf7\xfc\x8a\xd3\xdd\x41\x70\x12\xba\xa9\xa3\x93\x7b\xb9\x24\xd7\x26\x92\x34\x21\x77\xa9\x0a\xfe\x78\x51\xb0\xe9\xf6\xde\xf7\x3e\x78\x81\x04\xc6\xe3\x1d\x67\x64\x53\x7c\x96\x9e\x26\xd4\x81\x7a\x9b\xa2\x93\x18\x0c\x33\x74\xb0\x57\x6a\x0b\xb3\x8f\xbb\xe6\x29\xac\x63\x49\x35\x7f\x71\x31\xeb\x01\x00\xab\x24\x13\xed\xa6\x45\xb8\xf8\x40\xb7\x57\x26\x68\x22\x30\x49\x00\x41\xcd\x92\x72\x77\x78\xff\x2a\x3b\x3f\xc8\xc3\x5b\x71\x7f\x42\xcf\x8c\x93\x15\xd4\xc0\x69\x90\x45\x5f\xfe\xcf\xd7\x93\xfa\x04\x00\x00\xff\xff\x87\x77\xee\x60\xc5\x00\x00\x00")

func bindataVimtemplateLangsJavascriptJavascriptVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsJavascriptJavascriptVim,
		"vim_template/langs/javascript/javascript.vim",
	)
}



func bindataVimtemplateLangsJavascriptJavascriptVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsJavascriptJavascriptVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/javascript/javascript.vim",
		size: 197,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLispLispBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\xc9\x2c\x2e\x50\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6\x2f\xce\xc9\xcc\x2d\xd3\x2b\xcb\xcc\x55\xe7\x02\x04\x00\x00\xff\xff\xdc\x2f\xf4\x93\x2c\x00\x00\x00")

func bindataVimtemplateLangsLispLispBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLispLispBundle,
		"vim_template/langs/lisp/lisp.bundle",
	)
}



func bindataVimtemplateLangsLispLispBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLispLispBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lisp/lisp.bundle",
		size: 44,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLispLispVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsLispLispVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLispLispVim,
		"vim_template/langs/lisp/lisp.vim",
	)
}



func bindataVimtemplateLangsLispLispVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLispLispVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lisp/lisp.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLuaLuaBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x29\x4d\x54\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\xaf\xc8\xcf\xc9\xaf\xd0\x2f\xcb\xcc\xd5\xcd\x29\x4d\xd4\x4d\x2b\x29\xc8\x29\x4d\xcf\xcc\x53\xc7\x2a\x9b\x99\x57\x5c\x90\x9a\x5c\xa2\xce\x05\x08\x00\x00\xff\xff\x3e\xb2\x39\x4e\x49\x00\x00\x00")

func bindataVimtemplateLangsLuaLuaBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLuaLuaBundle,
		"vim_template/langs/lua/lua.bundle",
	)
}



func bindataVimtemplateLangsLuaLuaBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLuaLuaBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lua/lua.bundle",
		size: 73,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLuaLuaVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsLuaLuaVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLuaLuaVim,
		"vim_template/langs/lua/lua.vim",
	)
}



func bindataVimtemplateLangsLuaLuaVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLuaLuaVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lua/lua.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsOcamlOcamlBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x77\x4e\xcc\xcd\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\x4f\x49\x4d\xd3\xcd\xc9\x4e\xd2\xcf\x4f\x2e\xd0\xcd\xcc\x4b\x49\xcd\x2b\xd1\x2d\xcb\xcc\x55\xe7\x02\x04\x00\x00\xff\xff\x09\x6f\x0a\x9c\x2e\x00\x00\x00")

func bindataVimtemplateLangsOcamlOcamlBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsOcamlOcamlBundle,
		"vim_template/langs/ocaml/ocaml.bundle",
	)
}



func bindataVimtemplateLangsOcamlOcamlBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsOcamlOcamlBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ocaml/ocaml.bundle",
		size: 46,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsOcamlOcamlVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xc1\x4a\xc5\x30\x14\x04\xd0\x7d\xbe\x62\x08\xc2\x6d\x31\xbc\xb7\x0f\xbc\x85\x1f\xe0\x17\xf8\x44\x62\x7a\xad\x81\x9b\xa4\x24\xb7\xa5\x22\xfe\xbb\xb4\xae\x84\xd9\xcd\x70\xc6\xe2\x69\x9a\xf0\xcc\x4d\x52\x81\x56\x34\x5d\x8c\xb0\x62\xf6\x75\x09\xb9\x7f\x86\xc6\xb8\xa1\xaf\xef\x5d\x93\xae\xca\x43\xff\xea\xca\x79\xa0\xa3\x46\xac\xe5\x23\xcd\xd8\x42\xc3\x39\xa5\xd1\xd1\xbd\x3c\x90\xa3\x23\x44\xa3\xe1\x9d\xe3\xaa\x0c\xdb\x59\x0f\xfc\xf1\x66\x71\xf9\xa7\x5f\x60\xaf\xf9\xfc\xbf\x6e\x29\x5b\x63\x2c\x82\xb0\xf1\x31\x88\x80\x77\xe5\x32\x0d\xb3\x0f\xc2\x6f\x92\x8a\x72\xeb\x0e\xdf\x06\x00\xee\x54\x63\xc8\x42\x1e\x2f\xf4\x07\xd0\xab\xc3\xcf\x68\x7e\x03\x00\x00\xff\xff\x22\x4c\xc4\x59\xd4\x00\x00\x00")

func bindataVimtemplateLangsOcamlOcamlVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsOcamlOcamlVim,
		"vim_template/langs/ocaml/ocaml.vim",
	)
}



func bindataVimtemplateLangsOcamlOcamlVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsOcamlOcamlVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ocaml/ocaml.vim",
		size: 212,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPerlPerlBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\x48\x2d\xca\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x48\x2d\xca\xd1\x87\x31\xd4\xa1\x12\xc9\x96\xc5\xfa\x20\x7e\x7e\x6e\x5e\xa6\x5e\x59\x66\xae\x3a\x17\x20\x00\x00\xff\xff\xf2\x47\xca\xba\x40\x00\x00\x00")

func bindataVimtemplateLangsPerlPerlBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPerlPerlBundle,
		"vim_template/langs/perl/perl.bundle",
	)
}



func bindataVimtemplateLangsPerlPerlBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPerlPerlBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/perl/perl.bundle",
		size: 64,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPerlPerlVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsPerlPerlVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPerlPerlVim,
		"vim_template/langs/perl/perl.vim",
	)
}



func bindataVimtemplateLangsPerlPerlVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPerlPerlVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/perl/perl.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPhpPhpBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\xb1\x0a\xc3\x30\x0c\x05\xf7\x7c\x85\xc8\xf2\x96\x88\xec\x1d\x3b\x75\xf4\x2f\x04\x5b\xa9\x0d\x8e\x25\x6c\x27\xb4\x94\xfe\x7b\x69\x69\xb6\x3b\x0e\x6e\x1c\xc9\xdd\x1c\x5d\xf7\x12\xb2\x0c\x2e\xef\x77\x82\x45\x5b\x7c\xd7\x3a\x9f\x80\x89\x5e\x58\xb5\xe2\xf2\x8b\x98\x08\x41\xbf\xe2\x75\x33\x6d\x52\x29\x95\xd6\x97\x9c\x89\xb9\x28\x07\x39\x88\x15\xef\xff\xae\x75\xb1\x68\xcf\xf9\x48\x1b\x5b\x34\xf6\x8d\xd7\xf4\x90\x8a\xe1\x13\x00\x00\xff\xff\x12\x2c\xd2\xfb\x7d\x00\x00\x00")

func bindataVimtemplateLangsPhpPhpBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPhpPhpBundle,
		"vim_template/langs/php/php.bundle",
	)
}



func bindataVimtemplateLangsPhpPhpBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPhpPhpBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/php/php.bundle",
		size: 125,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPhpPhpVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6e\xdb\x30\x10\x45\xf7\x3e\xc5\x20\xdd\x38\x8b\x5e\x20\x30\x0c\x14\x6e\xd0\x14\x6d\x82\xa2\x4d\xba\xa7\xa8\x2f\x8b\x28\x39\x23\x90\x43\xd9\xbd\x7d\x21\x4b\x51\x21\xd9\x91\xb3\xe3\x62\xfe\x7b\xe4\x1f\xde\xd0\x8f\xba\x31\x56\x25\x52\xe3\xf3\xde\xf1\xea\x86\xbe\xb2\xf5\xb9\x04\xe5\x04\x4a\x6a\x14\x01\xac\x2b\x0e\xa6\xa1\xcd\x77\x98\x12\x71\x9b\xe9\xce\x1a\xef\xa9\x19\xc2\x1f\x5e\x12\x3e\x95\xe5\xfa\x76\xb3\xfb\xb9\x3d\x21\x5a\xf9\x03\xd2\x1a\x64\x85\x15\x47\xa5\x00\xce\x53\x48\x08\x73\xca\xae\x9f\x7d\x04\xe7\x4b\x28\x36\xad\xdb\x1b\x75\xc2\x17\x68\xcc\x73\xda\x53\x3f\x8e\x11\xf5\x45\x54\xa8\x44\xe5\xd8\x9d\x20\x52\x91\xf5\x26\x25\x92\x38\x1c\x02\x42\x81\x48\x99\x4b\xc4\xfe\xf6\x39\x26\x89\x53\x93\xc8\xdc\xd4\x81\x3f\x8f\xdc\xc1\x37\xcd\xd4\xcb\x99\x87\xd4\x78\xa7\x17\x93\xed\x72\xf2\xf7\xdb\x49\x5d\x4e\x3e\x9b\x62\xac\xe6\x57\x2d\x07\x2a\xa2\x43\x45\x8e\x2b\x89\xa1\xaf\xd9\x14\x92\xf5\x54\x44\xfa\x1b\x0a\xf1\x57\x9a\xf9\x36\x17\x3e\x48\x8b\x38\x4a\x9e\xa3\xe1\xd4\xc1\x7b\x40\xd7\x38\x12\x39\x7e\xe5\x45\xb0\x52\xe5\x3c\xa6\x54\x3d\x7b\xc7\x08\xfa\xbf\x5a\x30\xa2\x51\x90\x21\xc6\x61\xd8\xe6\x3a\xa2\xf1\xc6\x3a\xde\x9f\x19\x6e\xa7\x0a\x6b\xcf\xbe\x62\x47\x78\xc2\x61\x34\xdc\x1f\x35\x1a\xab\x84\x63\x13\x91\x52\xd7\xce\x9a\xbb\xa2\x3c\x05\x29\x47\x60\x72\x1e\xac\xdb\x57\x30\x30\x07\x0f\x9c\xfb\x11\xb3\x6e\xef\x2a\xe3\x13\x16\x44\x55\x94\x40\x09\x1e\xb6\xdb\xca\xaa\x7d\xcb\xb4\xd9\x7d\x7c\xd9\x5e\xd7\x69\xcc\x67\xb6\x00\xad\xa5\x7c\x9f\x29\x2c\x99\x1e\x4f\xa0\xa1\xb6\x7f\x01\x00\x00\xff\xff\xf9\xde\xc3\xf0\x5f\x04\x00\x00")

func bindataVimtemplateLangsPhpPhpVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPhpPhpVim,
		"vim_template/langs/php/php.vim",
	)
}



func bindataVimtemplateLangsPhpPhpVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPhpPhpVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/php/php.vim",
		size: 1119,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPythonPythonBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\xa8\x2c\xc9\xc8\xcf\x53\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\x4f\x49\x2c\xcb\x4c\xc9\x48\xcc\x29\x49\x2d\xd2\xcf\x4a\x4d\xc9\xd4\x2d\xcb\xcc\x55\x87\xca\x15\x25\x66\xe6\xe6\xe7\x99\x58\xea\x17\xa5\x16\x96\x66\x16\xa5\xe6\xa6\xe6\x95\x14\xeb\x95\x54\x94\xe8\x81\x14\xe9\x28\x54\xab\xa7\xe5\x17\xa9\x5b\x29\xa8\x23\xcb\xab\xd7\x72\x01\x02\x00\x00\xff\xff\x43\x5d\xe1\x70\x6b\x00\x00\x00")

func bindataVimtemplateLangsPythonPythonBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPythonPythonBundle,
		"vim_template/langs/python/python.bundle",
	)
}



func bindataVimtemplateLangsPythonPythonBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPythonPythonBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/python/python.bundle",
		size: 107,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPythonPythonVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x4f\x6f\xd4\x30\x10\xc5\xef\xf9\x14\xc3\xee\x61\x41\xa4\x52\x91\x2a\x51\x56\xa4\x17\x0a\x17\x24\x2e\xe5\xd6\x56\xd1\xac\x3d\x49\x0c\x63\x8f\xb1\x27\xfb\x47\x88\xef\x8e\x9c\x76\xdb\x46\xdd\x1c\xa2\x8c\xf3\x7b\x6f\xe6\x25\xb3\x80\xad\xf3\x67\xf1\xa0\x83\x84\x0a\xc7\x3e\xc9\x18\xcb\x51\x32\xc7\x43\x00\x1c\x55\x8c\xb7\x6f\x9e\x1f\xe1\x9b\x63\xfa\x79\x88\x04\x0f\x10\x64\x52\x16\x83\x0c\xb4\x8f\x18\xac\xe2\x06\xf2\xe0\x3a\xdd\x39\xab\x43\x73\x01\x8a\x9b\xac\x12\x9b\x4b\x30\xc2\x92\x8c\xf0\xe8\x43\xf3\xf1\x53\x05\xd3\x75\x07\x9d\x24\x8f\x2a\x51\x9d\x84\xfc\xbe\x31\x49\xfe\x40\x96\x4e\x8f\xc2\x8b\x27\xd2\xb8\xb0\x93\x64\x73\xe3\xba\x9a\x78\xba\x65\xaa\x3b\x49\xf5\x6e\x70\x4c\xb5\xa6\x43\x4d\x7b\x43\x51\xeb\xce\x05\x64\x3e\xd4\x96\xba\xda\x30\xe6\x5c\xef\x9c\x0e\x4f\x31\xbf\xfe\xb8\xae\xaa\x05\xfc\x22\xeb\xce\xb6\xce\x57\x4c\x0a\xfd\xba\x94\xcb\x28\x71\x8c\xad\x84\xd6\x8a\x42\x03\xe7\x2f\xdf\xf5\xa2\xd2\x62\xce\xae\x0f\x9e\x82\xe6\xd6\x88\xf7\x18\x2c\x34\xb0\xf8\xcc\x84\x96\xd2\x55\xbf\x78\xa5\xb0\xd4\xb9\xe0\xa6\x7c\xa7\x14\x76\xa6\xb0\x62\xc6\x62\x8e\x85\x7f\x89\x7f\x9f\x61\x63\xc6\x9e\x4e\xda\x85\x19\x97\x28\xa0\xa7\x53\x5c\x9a\x71\x79\x90\x5d\x6b\x90\xb9\x2d\xe9\x50\xc7\x44\xb9\xd0\xe7\x33\xca\x88\x8f\x4c\xaf\x93\x7c\x39\xbb\x89\x68\xe8\x6a\x6e\xe9\x31\x69\x5b\xf6\xa6\xf5\x18\xa3\x0b\x7d\x9e\x3e\x68\xb5\x00\x64\xaa\xd6\xa5\x1b\xd0\x5e\x29\xd8\xb7\xfd\x1a\x99\x5a\x76\x41\x29\xe5\x1a\xfe\x4e\xff\xfc\x6e\xf5\xb0\x63\xab\x35\xdc\xae\x3a\xc6\xdf\x74\xb9\xba\xaf\xe1\xdf\xbb\x62\x51\x96\x17\x5d\x62\x17\xe8\xb1\xe9\x63\xb5\x9c\x2c\x73\x99\x71\xb9\x75\x49\x47\x64\x0a\xdb\x25\x05\xdc\x30\x95\x71\x3f\x14\xf9\xcd\x21\x28\xee\x61\x70\xfd\xc0\xae\x1f\xb4\x5a\xc0\x35\x75\x38\xb2\x3e\x9f\x81\xcb\xb0\x21\x55\x4a\xa0\x03\x06\x88\xc2\x87\x9e\x45\x1f\xfb\x1d\xcb\xd6\xba\x7c\xf4\xbe\x3d\x8e\x7c\x3f\x41\x0f\x45\xfb\xe4\xd8\x96\xc8\x65\x82\xff\x01\x00\x00\xff\xff\xd4\x60\x40\xfb\x7d\x03\x00\x00")

func bindataVimtemplateLangsPythonPythonVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPythonPythonVim,
		"vim_template/langs/python/python.vim",
	)
}



func bindataVimtemplateLangsPythonPythonVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPythonPythonVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/python/python.vim",
		size: 893,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRubyRubyBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcb\x31\x0e\xc2\x30\x0c\x40\xd1\xbd\xa7\xc8\xe6\x85\x8a\x9d\x53\x70\x05\x27\x32\xae\xa1\x89\x2d\xc7\x41\x42\x88\xbb\x33\x54\xb0\x64\x7d\x5f\xff\xba\x0f\x4e\x10\xa6\x46\xe7\xa7\xd4\xd5\x51\xf6\x0e\xcb\xcc\x0f\x9a\xd5\x5c\xef\x54\x42\xb4\x49\x8f\x7f\xde\x74\xf0\x16\x59\xe3\x38\xbb\x51\xf9\x35\x2a\x5a\x33\x1e\x3e\xf2\x6b\x75\xba\x61\x09\x75\x69\x0c\xa7\xf4\x86\x40\x86\x4b\x82\x8a\xd2\xe0\xb3\x7c\x03\x00\x00\xff\xff\x8e\x55\x7a\x2d\x9c\x00\x00\x00")

func bindataVimtemplateLangsRubyRubyBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRubyRubyBundle,
		"vim_template/langs/ruby/ruby.bundle",
	)
}



func bindataVimtemplateLangsRubyRubyBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRubyRubyBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ruby/ruby.bundle",
		size: 156,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRubyRubyVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd3\xdf\x4e\x1b\x3b\x10\x06\xf0\x7b\x3f\xc5\xc0\x4d\x00\xe5\x70\x74\xce\xe5\x8a\x20\x41\x0a\x12\x12\x45\x68\x8b\x7a\x53\xaa\x68\xd6\x9e\xdd\x58\xf8\x9f\xc6\xb3\x81\xa8\xed\xbb\x57\x5e\x52\x92\x40\xa2\xde\x44\xc9\xe7\x9f\xbf\x8c\x9d\xac\x23\x81\xae\xe2\xbe\x59\xea\xe8\x93\x23\xa1\x59\xd3\xb7\x2d\xf1\xcc\x45\x34\x36\x74\x30\x81\xff\xd4\x0e\xa5\x1d\xe6\x4c\x79\x66\xc3\xac\x73\xb1\x41\xb7\x0f\x32\x5a\x97\x87\x45\x85\x7d\xc7\xb1\x4f\xb0\xb0\x9e\xf5\x3f\x45\x29\x00\xec\x25\x6a\x6f\x0e\xd6\x6f\xe1\xb2\x6f\xef\xe8\xf9\xda\x3a\x1a\x5f\xf6\x6d\x4d\x68\xe0\xe4\x94\x9b\x71\x79\x79\x1e\x9f\x9c\x76\xe4\x73\x22\x0d\x99\xc4\x45\x8d\x0e\x5a\xeb\x48\x96\x89\x26\xdb\x9d\x50\x2a\x1e\x96\x89\xa0\xe4\x85\x83\x60\x93\x25\xa6\xc9\xff\x3f\xcb\xa7\x3c\xb7\xad\x3c\x5b\x23\xf3\x55\x40\x2f\x09\x83\x11\x6c\x20\xc7\x56\xde\xf0\xdb\xe4\x57\x77\x9f\xd4\xea\x90\x82\x5d\x83\x3c\x2b\x5f\x3b\x1b\xea\x27\xf0\x43\x01\x00\x3c\xc2\xe8\xc9\x06\x93\x47\x50\xc1\xb7\x21\x59\xa5\xbe\xf2\xd1\xf4\x8e\xf2\x68\xbc\x19\xeb\x6a\x75\x97\xdb\xb1\xa9\x0c\x65\xcd\xb6\x79\xbf\x30\xad\x74\x0c\x42\x2f\xf2\x2e\x6f\x2b\x4f\x32\x8f\xe6\x5d\x7c\x5d\x65\x1b\x3a\x47\x12\x03\xfc\x01\xab\x39\xbf\xab\x47\xf8\xa5\xd4\x21\xd4\x5f\x12\xe9\xd3\x85\xf5\xe0\x31\x25\x1b\xba\xac\x3c\x26\x38\xbb\x25\x34\xc4\xe7\x02\x95\x46\xe7\xa0\xee\xc3\xb4\x67\xa6\x20\xc5\x97\xcb\x3d\x3a\x3e\x9b\xd6\xe7\x5b\x38\xaf\xf1\x1d\x21\x53\x1e\xf0\x0e\xe8\xd6\xf0\x16\xf7\x2a\x5c\xab\x0b\xe7\x0a\xca\x2b\xa5\x0e\xe1\x3a\xf2\xeb\x4f\xcb\xd4\xa2\x96\xc8\x4b\x65\x5b\x98\x63\x3e\x1a\x85\x85\xf5\xa3\x63\x05\xc0\x7d\x10\xeb\xe9\x00\x3c\x6a\x8e\xf9\x5f\x8f\xa2\xe7\x56\xca\x69\x15\xb9\x4c\x0a\x20\xa1\x7e\x42\x63\x0a\x19\xd6\x14\x05\x63\xdb\xe1\x62\xb6\xcb\x43\x88\x4c\xc3\x74\xee\x75\x3a\xc6\x04\x50\xd5\x17\xc6\xdc\x23\xa3\x27\x21\x3e\xd3\x7c\xbe\x03\xea\xa4\xa1\xaa\xa7\x31\x2c\x88\xe5\x3e\x66\x99\xc6\x60\xac\xd8\x18\xd0\xed\xd9\x42\xae\x74\x5f\xbd\x08\xa3\x96\x5b\x92\x81\x2d\x3e\x32\xbd\xc1\xa6\x31\x64\xc1\xb0\xd7\xba\xc5\x46\x65\x79\x76\xbe\x22\x5b\x6c\x1c\xed\x99\xc1\x4a\x29\xbf\x09\xce\x06\x7a\x20\x9f\xf6\xf4\xf2\xd0\x5b\x53\x40\x4f\x1f\x6b\x77\x78\xbb\xf6\x37\xc3\xc4\x9a\xfe\xb2\x85\xfc\xc6\x31\x3f\x0f\x7f\xe4\x41\xfe\x0e\x00\x00\xff\xff\x8a\x29\xee\x96\xc2\x04\x00\x00")

func bindataVimtemplateLangsRubyRubyVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRubyRubyVim,
		"vim_template/langs/ruby/ruby.vim",
	)
}



func bindataVimtemplateLangsRubyRubyVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRubyRubyVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ruby/ruby.vim",
		size: 1218,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRustRustBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcd\x41\x0a\xc2\x30\x10\x05\xd0\x7d\x4e\x11\xba\xc9\x2a\xe6\x0c\xde\x40\x5c\xb8\x1f\x4b\x68\x03\x93\x1a\xe6\x4f\x0a\xde\x5e\x12\x5a\x2c\x28\xe8\x2e\x61\xde\xff\x7f\xb0\xb7\x94\xad\xd0\x18\xc5\x5c\xb8\x4e\xd6\xf5\xb7\x97\x0a\x0d\x6b\xca\xbe\x7f\x9d\x31\x83\xbd\x56\xe8\x69\x4d\x79\x77\x15\xea\x99\x96\x29\xc8\x76\xe8\xea\x8c\xe7\x32\x1e\x58\x11\xba\x27\xc1\x2c\x11\x3a\x53\xa0\xfd\xdc\x71\xdb\x66\x94\xef\xb4\xad\x33\xca\xbb\xf5\x91\x0b\x47\x8d\x3f\xca\x0f\xea\x23\xda\xc6\xfe\x8b\xfb\x4d\x3a\xf3\x0a\x00\x00\xff\xff\x8f\xdd\x13\xa8\x22\x01\x00\x00")

func bindataVimtemplateLangsRustRustBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRustRustBundle,
		"vim_template/langs/rust/rust.bundle",
	)
}



func bindataVimtemplateLangsRustRustBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRustRustBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/rust/rust.bundle",
		size: 290,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRustRustVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x08\xcb\xcc\x55\x28\x4a\x4c\x4e\x2d\xe2\x4a\x2c\x55\x70\xcb\xcc\x49\x0d\xa9\x2c\x48\x55\x28\x2a\x2d\x2e\x51\xc8\xcb\x4d\x2c\x50\x48\x4f\x51\xb0\x09\xc8\x29\x4d\xb7\xd3\x00\x89\xe9\xa6\xa4\xa6\x69\xe2\x52\x59\x8c\xae\x52\xb7\xb8\x20\x27\xb3\x04\xa7\xfa\x0a\x0c\xf5\x65\xa9\x45\x25\x99\xc9\x89\x39\xb8\xb4\xd8\xe4\xa4\x26\xa6\xa4\x16\xd9\xa1\x3b\x2a\x3f\x59\x93\x0b\x10\x00\x00\xff\xff\x3a\xba\x61\xf4\xcb\x00\x00\x00")

func bindataVimtemplateLangsRustRustVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRustRustVim,
		"vim_template/langs/rust/rust.vim",
	)
}



func bindataVimtemplateLangsRustRustVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRustRustVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/rust/rust.vim",
		size: 203,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsScalaScalaBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4c\x53\xc8\x48\x2c\xd6\x50\x2f\xa8\x2c\xc9\xc8\xcf\x53\xd7\xe4\x52\x50\x50\x50\x50\x52\x28\x4e\x2a\xd1\x2d\xcb\xcc\x05\xf3\x02\x72\x4a\xd3\x15\xd4\xb3\x4b\xca\xf2\x53\x73\xb2\x53\x8b\xf4\xa1\x72\xea\x5c\xa9\x79\x29\x99\x69\x5c\x4a\x0a\x65\x99\xb9\xba\xc5\xc9\x89\x39\x89\x5c\x10\xa5\x29\xa9\x45\xa9\xd9\xe5\x95\x89\x25\x25\xfa\x70\x29\x75\x2e\x40\x00\x00\x00\xff\xff\xf5\xdc\x1e\x08\x6a\x00\x00\x00")

func bindataVimtemplateLangsScalaScalaBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsScalaScalaBundle,
		"vim_template/langs/scala/scala.bundle",
	)
}



func bindataVimtemplateLangsScalaScalaBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsScalaScalaBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/scala/scala.bundle",
		size: 106,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsScalaScalaVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsScalaScalaVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsScalaScalaVim,
		"vim_template/langs/scala/scala.vim",
	)
}



func bindataVimtemplateLangsScalaScalaVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsScalaScalaVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/scala/scala.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsTypescriptTypescriptBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\xcf\x49\x4d\x4c\x4b\x4f\x2c\xca\x49\xcc\x4b\xd1\x2f\xa9\x2c\x48\x2d\x4e\x2e\xca\x2c\x28\xd1\x2d\xcb\xcc\x55\xe7\x82\xa8\xf0\x48\x2d\x2a\xca\xcc\x4b\x2f\xc9\xcf\x73\x49\x2c\xca\xce\xc8\xcf\xc9\x4d\xd5\xaf\x4c\x2c\x29\xd6\x03\xab\x01\x04\x00\x00\xff\xff\xda\x3e\x5a\x94\x46\x00\x00\x00")

func bindataVimtemplateLangsTypescriptTypescriptBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsTypescriptTypescriptBundle,
		"vim_template/langs/typescript/typescript.bundle",
	)
}



func bindataVimtemplateLangsTypescriptTypescriptBundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsTypescriptTypescriptBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/typescript/typescript.bundle",
		size: 70,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsTypescriptTypescriptVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x49\x2d\x51\x48\xb7\xaa\x4c\x2c\x29\x8e\xcf\xc8\x2f\x2e\x89\xcf\x4e\xad\x2c\xcf\x2f\x4a\x51\xb0\x55\x30\xe4\x02\x04\x00\x00\xff\xff\x04\xc5\xdd\x0e\x1c\x00\x00\x00")

func bindataVimtemplateLangsTypescriptTypescriptVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsTypescriptTypescriptVim,
		"vim_template/langs/typescript/typescript.vim",
	)
}



func bindataVimtemplateLangsTypescriptTypescriptVim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsTypescriptTypescriptVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/typescript/typescript.vim",
		size: 28,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateThemesCodedarkCodedarkBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x2f\xc9\xcf\x4d\x2c\xce\x2c\x4e\x2d\xd2\x2f\xcb\xcc\xd5\x4d\xce\x4f\x49\xd5\x4d\x49\x2c\xca\x56\xe7\x02\x04\x00\x00\xff\xff\xb1\x5e\xe7\xae\x1f\x00\x00\x00")

func bindataVimtemplateThemesCodedarkCodedarkBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateThemesCodedarkCodedarkBundle,
		"vim_template/themes/codedark/codedark.bundle",
	)
}



func bindataVimtemplateThemesCodedarkCodedarkBundle() (*asset, error) {
	bytes, err := bindataVimtemplateThemesCodedarkCodedarkBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/themes/codedark/codedark.bundle",
		size: 31,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateThemesCodedarkCodedarkVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xce\xcf\xc9\x2f\x2a\x4e\xce\x48\xcd\x4d\x55\x48\xce\x4f\x49\x4d\x49\x2c\xca\xe6\x02\x04\x00\x00\xff\xff\x0b\xcc\x23\x64\x15\x00\x00\x00")

func bindataVimtemplateThemesCodedarkCodedarkVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateThemesCodedarkCodedarkVim,
		"vim_template/themes/codedark/codedark.vim",
	)
}



func bindataVimtemplateThemesCodedarkCodedarkVim() (*asset, error) {
	bytes, err := bindataVimtemplateThemesCodedarkCodedarkVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/themes/codedark/codedark.vim",
		size: 21,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateThemesDraculaDraculaBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x4f\x29\x4a\x4c\x2e\xcd\x49\xd4\x2f\xcb\xcc\x55\xd7\x51\xa8\x56\x50\x4f\x2c\x56\xb7\x82\x0b\xab\x2b\xd4\x72\x01\x02\x00\x00\xff\xff\x6b\x76\xa0\x96\x28\x00\x00\x00")

func bindataVimtemplateThemesDraculaDraculaBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateThemesDraculaDraculaBundle,
		"vim_template/themes/dracula/dracula.bundle",
	)
}



func bindataVimtemplateThemesDraculaDraculaBundle() (*asset, error) {
	bytes, err := bindataVimtemplateThemesDraculaDraculaBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/themes/dracula/dracula.bundle",
		size: 40,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateThemesDraculaDraculaVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xce\xcf\xc9\x2f\x2a\x4e\xce\x48\xcd\x4d\x55\x48\x29\x4a\x4c\x2e\xcd\x49\xe4\x02\x04\x00\x00\xff\xff\xc4\x98\x68\x2f\x14\x00\x00\x00")

func bindataVimtemplateThemesDraculaDraculaVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateThemesDraculaDraculaVim,
		"vim_template/themes/dracula/dracula.vim",
	)
}



func bindataVimtemplateThemesDraculaDraculaVim() (*asset, error) {
	bytes, err := bindataVimtemplateThemesDraculaDraculaVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/themes/dracula/dracula.vim",
		size: 20,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateThemesMolokaiMolokaiBundle = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x2f\xc9\xcf\x4d\x2c\x2e\xd2\xcf\xcd\xcf\xc9\xcf\x4e\xcc\x54\xe7\x02\x04\x00\x00\xff\xff\x65\x86\x6d\xb6\x16\x00\x00\x00")

func bindataVimtemplateThemesMolokaiMolokaiBundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateThemesMolokaiMolokaiBundle,
		"vim_template/themes/molokai/molokai.bundle",
	)
}



func bindataVimtemplateThemesMolokaiMolokaiBundle() (*asset, error) {
	bytes, err := bindataVimtemplateThemesMolokaiMolokaiBundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/themes/molokai/molokai.bundle",
		size: 22,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateThemesMolokaiMolokaiVim = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xce\xcf\xc9\x2f\x2a\x4e\xce\x48\xcd\x4d\x55\xc8\xcd\xcf\xc9\xcf\x4e\xcc\xe4\x02\x04\x00\x00\xff\xff\xc9\xb9\x87\x3f\x14\x00\x00\x00")

func bindataVimtemplateThemesMolokaiMolokaiVimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateThemesMolokaiMolokaiVim,
		"vim_template/themes/molokai/molokai.vim",
	)
}



func bindataVimtemplateThemesMolokaiMolokaiVim() (*asset, error) {
	bytes, err := bindataVimtemplateThemesMolokaiMolokaiVimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/themes/molokai/molokai.vim",
		size: 20,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrc = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x7a\x4b\x73\xdc\x3a\x76\xf0\xfa\xf6\xaf\x38\xa2\x2d\x53\x92\x9b\xdd\xb6\xe7\xf5\x7d\x2c\x75\x57\x5d\xcb\x96\xaf\x27\x92\xed\x91\x74\x9f\xa3\xa4\x03\x92\x20\x09\x0b\x04\x68\x00\xec\x87\x75\x75\x2b\x99\x45\x26\x35\x8b\xa9\x2c\xa6\x92\xac\x6e\x25\xa9\xcc\x2a\x9b\xbc\x2a\x9b\xec\x92\x7d\xf2\x1f\xfc\x03\xe6\x37\xa4\x0e\x40\xb2\xbb\xd5\xdd\xb6\x2a\xb1\xb2\x88\x16\x2d\xf2\x9c\x83\x73\x0e\x80\xf3\x04\xe8\xc1\x98\x15\x41\x24\xa5\xd1\x46\x91\x12\x2e\x2f\x7b\x5f\x50\xa5\x99\x14\x57\x57\x9d\x8e\xb7\xf7\x31\xff\x3a\x9e\x07\x5f\xb0\x22\x78\xc5\xab\x0c\x62\xa9\xe8\xc7\xe6\xcf\xa9\xc1\xe9\x94\xbc\xca\x46\x74\xca\xb4\xd1\x03\x3a\x2d\x89\x48\x76\xfc\xcb\xcb\xde\x81\x14\x29\xcb\x7a\x8f\x89\xa6\x4f\x98\xba\xba\xea\x93\xca\x48\x2e\x49\xd2\xc7\x01\xbd\x31\x2b\xfc\xdd\x0e\x4b\x21\x27\x7a\xc7\x9f\x30\xf1\x83\x47\xfe\xee\xbd\x7b\x5b\xcd\xeb\x8f\x7f\xe8\xef\x76\x00\x50\x46\x5c\x29\x7e\x5d\xc0\x41\x78\xfe\x25\x13\x89\x9c\xe8\xf3\xd3\x99\x16\xc4\xb0\x31\x3d\x47\xc2\x1e\x9d\x52\x7f\xb7\x43\xb9\xa6\xef\x19\x8e\x30\xa4\x12\x09\x4b\x3b\x76\x22\x59\x38\x66\xc5\xa8\xdd\x99\x11\x27\x22\xd3\x30\x00\xef\xf2\x12\x14\x11\x19\x85\xbb\x17\x74\xd6\x85\xbb\x63\xc2\x2b\x0a\xe1\x00\x7a\x47\x44\x64\x15\xc9\xe8\xd5\xd5\xe5\x25\x4b\x2d\xfe\xea\xaa\x7b\x79\x49\x45\x82\x20\x47\x89\x4f\x16\xe0\xad\x15\x43\x13\x66\xa4\x72\x72\x7a\x4f\xed\xcb\xd5\x95\xf7\xc9\x27\x9f\x7c\xe2\x81\x18\xb3\x02\xa4\xc2\x35\x5e\x3b\xd6\xe4\xb4\xa0\xf5\xd0\x33\x7c\xde\x24\x24\x55\xa4\xf8\xc0\x5c\x0e\x15\x29\xe8\x44\xaa\x0b\x7d\xd3\xd9\xe0\xde\x6d\xa5\x8c\x53\x45\x49\x42\x22\x4e\x77\x96\x6d\x01\x77\x0f\x49\xe8\x94\xc6\x95\xb1\x04\x0b\x3b\x81\x58\x00\x1a\xe7\x92\x2a\x05\xde\xd7\xb2\x82\x9c\x8c\x29\x18\x09\x4c\x68\x43\x38\xb7\xfb\x86\xd3\x4f\x99\xd2\xa6\x85\xa2\xff\xa0\x14\x98\xc9\x4a\x69\xca\xd3\x2d\xcf\xb1\xb2\x62\x28\x78\x6f\x2c\xc0\xed\xac\x93\x00\xde\x73\x37\x98\x89\xac\xf5\x88\x5e\xaf\xe7\xb5\x78\x7c\xd2\x8c\x53\x61\x2c\x1f\xf0\xb6\xbc\x05\x5d\x3d\x08\xd2\x23\x09\x1e\xf4\x40\xe7\x94\x73\xaa\x63\x52\xae\x4c\x17\x7a\xe0\x41\x10\xc4\x8a\x12\x43\x83\x84\x29\x0d\xb9\x31\xa5\x0e\xfb\x7d\x45\x26\xbd\x8c\x99\xbc\x8a\x2a\x4d\x55\x2c\x85\xa1\xc2\xf4\x62\x59\xf4\x5f\x57\x82\x66\x95\x10\xfd\x66\x5a\xfd\x82\x68\x43\x55\xeb\x23\x5e\x6d\xc4\x59\x28\xa4\x19\xa5\x4c\x30\x9d\x8f\x6a\xc9\xb8\xa3\x33\xaa\xbd\x4e\x07\x00\x9d\x2b\x2e\x12\x9c\xde\x53\x61\xa8\x82\x3d\xc0\x59\xd6\x13\x6f\x0c\xdd\x83\x13\xfa\xa6\x62\x8a\x26\x61\x27\xc6\xd5\x44\x36\x77\x22\x9a\x31\xb1\xf3\x3e\xd7\x45\xb2\x8c\x26\xfe\xee\xee\x6d\x04\x29\x1b\xa0\x9a\xfd\x2d\x49\x7c\x41\x32\xaa\x3f\xb6\x1c\x2b\xc4\xd7\xb1\x92\x92\x4b\xa9\x69\x5f\x50\x95\x18\x45\xa9\x5f\xa3\x5e\x33\x6d\x94\xdd\x87\x06\x13\x18\x12\xe9\x06\x6d\x4a\x59\x52\x8b\x8e\x65\x51\x50\x61\x88\x9a\xad\xe2\xd2\x2a\x63\x18\x8a\x1a\x0c\xc2\x08\x53\x9c\x09\x87\xaf\x9f\x3f\x80\x0e\xac\x67\xb7\xa2\x09\x53\x11\x27\x89\x23\xc9\x98\xc9\x2a\x63\xa8\x5a\xe4\xa1\x63\xc5\x4a\xa3\xfb\x99\xa2\xa5\x8d\xac\x6b\x70\x07\xa7\x9f\x96\xa5\x92\xd3\x06\x77\x42\x58\x21\x45\xc2\xfa\x09\xe5\xac\x60\xe6\x98\x98\x56\xaf\x82\xbc\xae\x8c\xae\x74\xce\xfa\x86\x64\x11\x69\x85\x25\x54\x68\x1a\x10\x41\xf8\x4c\x33\xdd\x27\xbc\x1d\xf2\x75\x96\x25\x4a\x4a\xd3\x67\x22\xa1\xc2\x1c\x2d\xcc\xd2\xc5\xb8\x79\xd6\xeb\x2f\xe5\xc0\xa0\x2a\x13\xb2\x30\x1f\x9d\x53\xaa\xaa\xda\x23\x24\x9f\x65\x5c\x9a\xd5\x85\x56\x79\x15\x11\x15\xf9\xe0\x81\xaa\x4d\x1a\xa2\x19\x34\xeb\x8f\x71\x24\x7c\x16\x29\x39\xd1\xb4\x1e\x7b\x9a\xcb\x2a\x93\xfd\x84\xca\x92\x53\x43\x7b\x18\x5d\xfd\x2e\x5c\x82\x9f\x48\x3f\x04\x3f\xfc\xdc\xea\x71\x42\x0b\x69\x28\x0e\x61\x42\xfb\x70\xd5\xb9\xbc\xec\x3d\xae\xd2\x94\x2a\x1b\x62\x7b\x8f\x2b\x91\x70\x8a\xd9\x9a\xa5\xc0\x74\xc2\x14\x8d\x8d\x54\xb3\x1d\xbf\x5f\x69\xd5\xe7\x32\x26\xbc\x2f\x4b\xd3\x4f\xdf\xa6\x36\x83\x39\xe9\x6b\x90\xf0\x6d\x8d\x6b\x83\x40\xfa\x36\x75\xbb\x57\x67\xaf\x55\x74\xad\x30\x53\xa8\xf1\x77\xfd\x9e\x03\xd5\x33\xe8\xf5\x1b\x27\x0a\x82\x88\x09\x54\x7e\x1d\x8f\x5a\x84\x8d\x08\x2e\xb4\x14\xe4\x02\xf3\x88\x9f\xe1\x83\x8f\x13\x73\x31\x6d\xc7\xb7\x00\x17\xab\xf1\x6f\x99\xdc\x51\x3b\x46\x4b\x6b\x8c\xf1\x49\xc9\xb8\x57\xaf\xb0\x53\xcf\x8d\xc3\x2a\xc7\x95\x25\xa7\x54\x63\xdd\x53\x8f\x9c\x4a\x2e\xa7\x76\x67\x0b\xa6\x63\x7f\x05\xaa\x1d\xb5\x6f\x87\x9f\x0a\x56\x96\xd4\xe8\x46\x2a\x53\x5f\x50\xd5\xaf\xb8\x61\x5a\xb0\xb2\xf5\x9b\x5c\x8a\xb7\xc4\x8d\xae\x07\xf8\xb7\x11\xbe\x0e\x2a\x6d\x64\x01\x91\x35\x8c\x8f\x1e\xb7\x36\xa7\x6c\x67\x95\xad\x3d\x7a\x70\x79\x69\x89\xe0\x0a\x8d\xb6\xc9\xd7\x9d\x3a\x61\x7f\xf4\x89\x7f\x5c\x76\xb8\x90\xcf\x45\xcc\xab\x84\x02\x26\x49\x5f\x03\x9d\x1a\x45\xea\x65\x45\x9b\x5c\xaa\x35\xea\x6c\xe5\xcd\xb3\xd5\x11\x3a\x57\xb3\x1a\xde\x2e\x1a\xad\x96\x95\x8a\x29\x6c\xa0\x69\x92\xe2\x3c\x11\x52\x91\xec\xec\x2e\x67\x49\x14\x6a\x66\x25\xb5\x04\x4c\x80\x8b\x6e\x20\x45\xe7\x36\x4c\xe9\x31\xd1\x2c\x86\x53\x6a\xaa\xf2\x23\x73\xf7\x90\xfd\x53\x11\xcb\x84\x89\xac\xa3\xa9\x01\x5a\xbf\x0c\x2a\x93\x06\xff\xcf\x82\x70\xb2\x1f\x00\xeb\x1a\x6e\x6b\x44\x41\xa1\xae\x59\xc1\xc3\x70\xea\x5d\x5d\x21\xbd\x31\xb3\x94\x68\xd3\x18\x1e\x4a\x3e\x64\x53\x88\x48\x7c\xa1\x4b\x12\xd3\x7a\x11\x2d\xef\x16\x38\x70\xc0\x2e\x95\xbc\xab\x0d\x51\xc6\x8e\x3b\x23\x91\xee\xc1\x31\x99\x41\x44\x41\x8e\xa9\x52\x2c\x49\xa8\xc0\x50\xdf\x54\x3c\xaa\x42\xaf\xb3\x72\x49\xa4\x8d\x2c\x07\x3f\xb4\x6f\x5a\xa6\xa6\x81\x3c\x70\x90\x9c\xa5\x66\xc2\x12\x93\xd7\x24\xce\x88\x0c\x89\xac\xac\x63\x52\x02\xa7\x24\xa1\x0a\xb3\x47\xd7\xc6\xc6\x82\x94\x0e\x34\xf0\xbb\x2e\xf6\x3c\x15\x68\x7f\x90\xd7\x7a\x58\x1f\x74\xe2\x1d\xc8\x05\x28\x4a\x54\x9c\x37\x2b\x9d\x73\x6d\xdf\xed\x0b\x13\xf1\xe2\x5b\x26\xa4\xa2\x31\xd1\xd4\x69\x58\x10\x65\xec\x5b\xbb\xf0\xa9\x54\x05\x31\x7a\x50\x09\x36\xed\x26\x52\x77\x0b\x12\x77\x16\x43\xf4\xdd\xd3\xcf\x9e\x1e\x1d\xd5\x41\xda\x4d\x93\x72\x3e\x70\xe0\x26\x93\x2c\x62\xfa\x11\x13\x7d\x9d\xcf\x6b\xc2\x3a\xb6\x42\x41\x04\xc9\x28\xd6\x36\x75\x5e\xa8\x11\xa3\x36\xc9\xd5\xcd\xc6\x4a\x7d\x58\x13\x7a\xd7\xc6\x35\x1d\x1f\x0e\x13\x72\x1d\x56\x63\xcd\xbf\x16\x8b\x55\x16\x11\xc9\x88\x70\x46\x34\xc5\xee\xe5\xe1\xed\x34\xc8\xba\x22\x1c\x5d\xce\xa0\x75\x7f\x6c\x09\x7a\x26\x0c\x99\x62\xb8\xc0\xf5\x47\x53\x55\xf6\x49\x54\x45\x44\x95\xeb\x3c\x85\x1c\xd5\x66\x34\x2a\xa8\xa8\x06\x0f\xaf\x97\x1c\x07\x92\x4b\x1d\xbb\x06\xcf\x19\x46\x21\x2b\x4d\x0b\x99\x50\x3e\x28\x65\x59\x95\xce\xfc\x47\x07\x72\xf0\xe8\x47\x3f\xb6\x2f\x59\xc5\x64\x69\x98\x14\x7a\x40\xb3\x42\x19\xe6\xa0\xa9\x18\x1c\x4b\x21\xad\xc7\x9d\xc3\xc3\x07\x9d\xa6\x03\xf7\xb2\x8a\x8d\x54\x25\x04\x13\x99\x57\xb7\x6e\x2d\xbc\x20\xb1\xb7\x0b\xdf\x7e\xbb\x04\x41\x7f\x9f\x1b\x5d\x56\xb1\x54\x0a\x33\x38\xa6\x82\xcb\x30\x7f\xf8\xa8\xc5\x18\x45\x84\x2e\x89\xa2\x22\x9e\x0d\x7e\xd2\xb6\x66\x0b\x0d\x7a\x16\x36\xb5\xe9\x08\xad\x85\x26\x6e\xb3\x01\x30\x25\x34\xc5\x64\x4b\x3b\xaf\x2f\x47\xd4\xfa\xa2\x23\x5f\x83\x8e\xa5\x88\x29\xe1\x71\xa5\xb4\x6d\xb1\x1f\xac\x25\xca\x09\xe2\xfc\x77\xbf\xf9\x13\x7f\x1d\x3e\xb5\xfd\x58\xa3\xd1\xa6\xb0\xe7\x16\xec\xee\xc1\xcb\xa3\x97\x27\x67\x4f\x4f\x8e\x61\x80\xe5\x94\x90\x05\x0d\x0c\x55\x05\x13\x84\xfb\xf3\x15\xa1\xaa\x18\x38\xe4\xa3\x1f\xfd\x38\x96\x5c\x2a\x5c\x96\xc6\x53\x91\x51\xcb\x63\x8a\xc4\x7e\x5d\x80\xb5\x83\x2d\x74\x71\xf0\x42\xc3\x5b\xff\x6f\xa2\x6f\xed\xe5\x1b\x15\x67\x29\xdc\x43\x6e\x30\xf8\x0e\xfc\x86\x23\x0a\x74\x26\x55\x99\x41\xcd\x62\x31\x9c\x3f\x61\xda\x46\x41\x93\x53\x88\x38\x13\x17\xd8\x59\xbb\x75\xee\x39\x43\x8b\xd5\x80\x84\x16\x25\xc5\x03\x27\x9d\xbe\x59\x95\x4e\x2a\x38\xa3\xaa\x6d\x59\x35\x35\xb6\x46\x06\xec\xd3\x38\x97\x69\x3a\x78\xd0\xd0\x1c\x51\x8c\x15\x6b\x69\x7e\x80\xca\x71\x8d\xee\x61\xc3\xdc\x32\xa2\xd5\xfa\xd4\x10\x53\x69\x88\x88\xf3\x41\x4e\xb4\xd1\x16\x34\x78\x64\xf1\x9f\x6b\x0a\xd6\xa9\x98\x68\x93\x4d\x9d\x5a\x1a\xf0\xd2\x8b\x1e\xa0\x03\xd9\x75\x62\x86\xd3\xf9\x93\xe4\xc9\xc0\x3b\xab\xf7\xdd\x9b\xc3\xb5\x51\x98\x59\xb7\x0f\xdd\x28\x27\x1c\x39\x0d\xb6\x0f\xb7\x8b\x6d\xb5\x9d\x6f\x4f\xb6\x07\x3b\xdb\x97\xf7\xd2\xf4\xaa\xbf\xfd\xf5\xee\x39\xec\x20\xfa\x1c\xb6\xf9\x79\x7f\xfb\xa8\x7b\x0e\xb1\xe4\xe7\xb0\x1d\xef\x9e\x63\xe0\x76\x69\x06\x93\x54\x89\xc1\x2b\x84\xb3\x9c\x6a\x0a\x13\xc6\x39\xd8\x22\x9d\x61\x1a\x04\x93\x13\x03\x99\xc4\x3d\x32\xd2\xee\x99\xa0\x53\xac\x61\x30\x13\x03\xb1\x19\xc0\x32\xb2\x03\x63\x6a\x37\x43\x0a\x4b\x69\xd7\x82\x19\x5f\x43\x2a\x2b\x91\x00\x13\xbd\x8e\xc0\x9c\x55\x90\x12\x04\x88\xb7\x6f\xdf\x8e\xe7\x80\x17\xf0\xc2\x02\x16\xf2\x93\xb7\xd7\xf4\x64\x77\xe6\xf3\xb5\x81\x63\x79\x09\xee\x0f\xb6\x2f\xd7\x50\xee\xec\x5e\xcd\x13\xd5\x42\x8b\x5c\x67\x8b\xfa\xad\x3d\x0a\xf3\x4b\x39\xa1\x16\xc4\x74\xee\x2f\x13\xdd\xa1\x53\x43\x05\x26\x17\x7d\x27\x52\x44\xc4\xf9\x9d\xc5\x00\xb2\x91\x96\x70\x7a\x33\x42\x43\x22\x07\xba\x19\x31\xf6\xd5\x9b\x69\x47\xfa\x82\x95\x23\x5a\x94\x66\x36\xd2\x34\xb6\xa1\xfc\xb6\x92\xe0\xa7\x51\xa4\xe8\x98\x11\x2b\xe4\x16\xf8\x0b\xe9\x8c\x4d\x83\xa2\x84\xf3\x19\xe4\xa4\x2c\x67\x50\x09\xc3\x38\xcc\xda\xa3\xbf\x9c\x69\xd0\xb9\x54\x26\xae\x8c\xee\xc4\x68\x54\xc4\x6a\x06\x5f\x6e\xc1\x64\x6b\x09\xf2\xb3\x2d\x78\x73\x0d\x42\x38\xdf\x82\x37\xf8\xbb\x3c\xf6\x0d\x4c\xde\x2c\x43\x08\x4c\xc8\x12\x64\xf2\xb3\x15\x9a\x55\x08\x4c\x96\xe5\xc1\x9b\x15\xf9\x56\xbc\x8d\x25\x2f\x9e\x9e\x3c\x39\x53\x94\x42\x6c\x6b\xa5\x4a\xd9\xc5\xad\xb7\xb8\x41\x1e\xe4\x4f\x98\x3a\x96\x09\x1d\x3c\xba\x86\x79\x6e\xeb\xc2\xc1\xcf\xfd\xf3\x9e\x8a\xe2\xbb\xd8\xe3\x9f\x7f\xe7\xfe\xf5\xca\x59\x0d\xe8\x25\x51\xfd\xa0\xdf\x70\x66\xa8\x7d\x19\x8d\xca\x59\x4c\xe2\x9c\x8e\x46\xfe\xef\x5f\xe3\x7a\x2a\x95\x79\xa9\xb0\x9a\xfd\xb9\xff\x07\xa3\x11\xb2\x72\x0c\xfa\xf6\xdf\x5e\xcd\x6c\x52\xd6\x6c\x23\x72\xd1\x8a\x5e\xe1\x95\xcb\xc9\x63\x29\x2f\x0a\xa2\x2e\xf4\xa0\x31\xde\xe6\xe8\x6c\x84\x95\xf7\x28\x95\x71\xa5\x47\x52\x8c\xb0\x90\x9d\x13\x35\x2c\x8e\x49\xf9\xb2\xa4\xe2\xb9\x38\x23\xd1\xa9\x3b\x7d\x1d\x80\xbf\x7f\xc2\xb2\xdc\x1c\x63\x85\x33\xf4\xaf\x8d\xf8\x92\x89\x53\xf6\x16\x1d\xfd\x47\xae\xa4\x9f\x30\x9e\xb8\x1a\xfa\xfe\x60\xaf\x6f\x8a\xb2\xbf\xd7\xdd\xeb\x69\x89\x3f\x93\xb2\xbb\xd7\x7b\xcb\xf0\xb7\x9c\xc5\xdd\xbd\x5e\x12\x21\xd8\x2e\xd5\x3c\x64\xed\xbb\x73\xdf\x21\xec\x1f\x3e\x1a\x42\x2b\xe9\x90\x89\x64\xff\xe0\x64\xb8\x96\xf0\x07\x0b\x84\x67\x32\xcb\x38\xb5\xa4\x1d\x0f\x9a\x03\xb8\x75\xc3\x5c\x23\x31\x4c\x21\x3c\x41\x32\x3b\x04\xa7\xf7\x4c\xd1\x72\xf4\x84\xa6\xa4\xe2\x66\xf4\xb2\x6c\x3c\xdd\x0f\x9e\x9f\xf8\x73\x82\x53\x0c\x07\x87\xb8\x8e\x88\xdb\xeb\x71\x99\x01\x4e\xe9\x3a\xc9\x13\xa6\x2c\x45\x2f\x63\x58\x5a\x26\x74\x54\xc8\x04\x5b\x24\x6c\x5f\xa0\x29\x46\x80\x16\x15\x77\x26\xb9\x59\x53\x9d\x43\xd8\x0c\x70\x13\xbc\x8d\xd3\x13\x57\xe7\x7f\xfc\xb0\x03\x8a\x16\x12\xc3\x8a\x22\xcc\x9e\xfc\x4f\x72\x66\xa8\xad\x7c\x75\xa7\xee\x2e\xb6\xb0\x31\xfd\xb2\x85\x43\xb8\xad\xfb\xe7\xfa\xfc\xfe\xdd\x7e\x9f\xde\xc6\x64\x0f\x2b\x11\xdf\x4a\x90\x75\x17\x2d\xae\x21\xdc\xd3\xa1\xa6\xa6\x2a\xbf\x54\xae\x2e\xb0\xad\x61\x5a\x4b\x86\x6b\xc8\x9d\x79\x09\x3f\x51\xa4\x9c\xbf\x14\x83\x85\x12\x9e\x4e\xeb\xbe\xf9\x27\xff\xdf\x95\x98\x0d\xbb\x36\x37\x7f\xdc\xe9\x60\x4e\xaa\xdb\xfb\x93\xea\x16\x0e\xd5\x3c\x0f\x4b\x25\x78\x75\x80\x39\x09\x2b\x7c\xa0\x42\x56\x59\xde\x85\x44\x42\xdd\xb3\xe5\x2c\xcb\x39\x86\x22\x04\xc4\x68\x40\xa9\x92\x05\xd8\xb3\x09\xa8\x04\xa7\x5a\xc3\xa3\x07\x0f\x6c\x85\xa4\x3b\xa4\xca\x94\xac\x4a\x2c\x51\x54\x1c\xe0\x88\x00\xc9\xdd\x49\x46\x7b\x3d\xb3\xb5\x70\x53\xf3\xb8\x4a\x9b\xb2\x37\xac\x45\xe2\x30\x28\xc8\xd4\x15\x97\x8f\x1e\x3c\x68\xd9\x3e\x7d\xf1\xc4\xa6\x95\x13\x5a\x50\xec\x1c\xeb\x62\x1b\x4a\xa9\x99\xdd\x87\x65\xf9\xaa\x26\x0b\x1c\x59\xd0\x92\x6d\xd2\xe4\x84\x92\xe4\x95\xd4\x06\xf6\xb0\xfd\xb0\x85\x97\xe7\x9f\x7b\xde\x2e\x0c\xe1\x21\xdc\xbb\xb7\x04\xda\x1f\xd4\xaf\x77\xb1\x2b\x04\x3a\xa5\xd8\xc0\xab\x82\xf0\x2d\xc8\xfe\xf0\xdc\xf3\x10\x68\xed\xe2\xba\xfa\x66\x6a\xae\x69\x3a\xa9\xed\xf0\xbd\x9a\x75\x1f\x57\xe9\x0b\x3a\xc1\xe8\x07\x7b\x3d\x33\x35\x60\xcf\xec\x56\x4d\xf9\xba\x3c\x2c\x82\xfb\x31\xfe\x5e\x13\x8b\xa0\xc0\x21\xd6\x0a\x46\x51\x67\xb3\x92\xba\x32\xba\x6d\x39\x84\x9c\x1f\x19\x2d\x69\x59\x6b\xd7\xad\x15\x86\x83\x63\x72\x41\x8f\xd0\x1f\xad\xba\x2d\x83\xe6\x38\x71\xb0\xac\x94\xd5\x17\x3d\x0d\x59\x2a\x4a\x92\xdb\xf0\xa8\xe3\xba\x4d\xb8\x8d\xa3\xdb\xd3\x92\x33\xd3\x69\x33\xc9\x91\x4b\x20\x39\x84\xfb\x07\x41\x35\xd4\x88\x75\xd9\xf4\x1a\xc5\xb8\xa6\x18\xcf\x49\x90\xdd\xb3\x35\xcc\x32\x02\xe1\xb3\x89\x62\x86\xae\xe5\x94\xc5\x10\x3e\xc3\xb0\xbe\x41\x52\x86\xd9\xec\x59\x59\xe9\x7c\x3d\x9a\x73\x8b\xe6\x7c\xc3\x68\x08\x9f\xb9\xae\x64\x3d\x3e\x82\xf0\x59\xc4\x49\xb1\x41\xb9\x04\xc2\x67\xe3\x84\xa5\xe9\x7a\xb4\x82\xf0\x99\x4b\x57\x4d\x21\xb1\xe6\x4c\x6e\x9e\xa8\x9b\xfc\x2c\x21\xc4\x02\xaa\xbe\x49\xd9\x3f\xc5\x1c\x36\x5c\x43\xa7\x21\x3c\x25\x63\xfa\x41\xba\x04\xc2\x27\x94\x53\xd3\x52\x2e\x17\x40\x0d\x59\x0c\xe1\x01\x97\x7a\x89\xaa\x39\xac\x5d\x20\x3f\x23\xd1\x10\xb2\x45\xbd\x4f\x03\x07\x3b\x5b\x57\x74\x9c\x06\x66\x08\xa1\x21\x91\xa0\x93\x96\xe5\x29\xa6\x22\xa9\xec\xf9\x42\x7b\x0a\xb9\xaa\x52\x0f\x42\x1e\x27\xb0\x1d\x96\x61\xde\x8e\xc5\xa5\xd1\x40\x04\xd0\x84\x19\xa8\x33\x3e\x4c\x98\xc9\x6d\x67\x5b\x12\x93\x83\x4c\xed\x73\x5c\x29\x45\x85\xe1\x33\x4b\x4b\x13\xeb\xa7\xf8\x83\xad\x19\x13\x2b\x1b\x46\x21\xa4\xb0\x7f\x10\x9c\x0c\x9b\x2f\x4a\x3c\x2b\xdb\xb3\x5f\x01\xf4\x3d\xb8\xae\x04\x18\x12\xfd\x0f\xf5\x58\x51\xc2\x50\xbb\x5c\x37\x54\xa4\xbe\xf8\x6b\xab\xe6\x02\xdb\x0e\xce\xb4\x09\xb9\x14\x19\xd5\xa6\x6b\x5f\xd2\x8a\xf3\xd5\xca\xba\x87\x05\xb5\x8c\x5e\x77\xb1\xaa\xec\xee\x61\x4f\x52\x57\xd5\x0b\xed\x86\x2d\x44\xef\x1e\x7e\x73\x38\x7a\xf2\xf4\xf0\xd3\xcf\x8f\xce\x46\x07\x2f\x8f\x8f\x3f\x7d\xf1\x04\x06\x00\x5e\xca\x44\x02\x7b\x10\xd8\xe9\xfa\x7b\xfd\xf3\xde\x9e\x0f\x41\xa9\x2a\x41\x21\x90\x0d\x7c\xb1\x60\xed\xef\xad\xa3\x30\x44\x65\xd4\xac\xc7\x25\x4c\x5f\xc7\x40\x60\x6f\x6f\x52\x04\x31\x61\x2c\xb1\x85\xf0\x06\xf2\x68\x08\xfd\x84\x8e\xfb\xa2\xe2\xdc\x43\xd7\xc3\xca\xe0\x94\xf1\x31\x55\xf5\x01\x0b\x55\xee\x3c\xa3\xfd\x8e\xc5\x27\x59\xfb\x71\xd2\x86\x09\xfb\x24\x83\x20\xa8\x6f\x09\x82\xc0\xad\x24\xd8\xa2\x3c\xc8\xc0\xf3\x9a\x13\x36\xec\x04\x4a\x95\x0d\x48\x76\x0e\x41\x20\xa4\xcd\x07\xee\xd1\x9d\xed\xb5\x87\x1f\x8a\x95\x48\x7c\x5d\x15\xf5\x61\x55\x14\xaa\x62\x5b\xb0\x45\x95\x52\xc9\xb9\x9c\x40\x10\x64\x5c\x46\xe0\x6d\xa1\x6e\xfd\xbd\x15\xc5\x94\x55\x6c\xcc\x0a\x2b\x1c\xa0\xad\x9c\x83\x88\x88\x0c\x02\x41\x54\xa6\x07\x7b\x80\x0d\x93\x4b\xcb\xe9\xdb\xf4\xce\x98\x15\x77\x70\xc0\x8e\x13\x1e\x4b\x5e\x15\x28\xd4\x7e\xdd\xe0\x0e\xbf\xed\x1c\x83\x9c\x92\x04\x9d\x1b\x15\x9c\xd2\x24\x70\x47\x64\xba\x5d\xb2\x20\x26\x9a\xde\x40\x6d\x27\x44\x2a\xf0\x08\x9f\x90\x99\xf6\xc0\xef\x2d\x7e\xac\xb3\xff\x26\x40\x45\x87\xbb\x3d\xff\x5b\x30\x0a\x82\x04\xbc\xf3\x07\x0f\x7f\xe2\xf9\x5d\x78\xd8\x85\x7d\x9c\xcc\xf0\x41\xfb\x45\x58\xdc\x3a\xdb\x41\xf0\x6a\xf8\x61\x0f\xdb\xdc\x44\x45\x10\xba\xb3\x7c\xfd\x01\x42\x0a\xe1\xe1\x37\x87\x10\x14\x96\xce\x3b\xa1\xb1\x1c\x53\x35\x6b\x16\x5c\xbb\xf2\x33\x67\xda\x5e\xc4\x98\x5c\x61\xc1\x0a\x87\xdf\x1c\x76\xc4\x62\x28\x9c\x41\xf8\x99\xa3\x09\xdb\x5c\xd2\x5c\x97\xbb\x66\xfa\x73\x6e\xd8\xa9\x60\xa5\x7e\x6a\xe7\x73\xa6\x58\x96\x51\x35\xf0\xf6\x0d\x89\x86\xde\x75\xa2\x9f\x56\x45\x79\x28\xd5\x84\xa8\x9b\x50\x3e\x26\xf1\xc5\x32\x69\x1c\xac\x21\x7d\x9a\x30\x63\x4b\x86\x81\x37\xa6\xca\xb0\x98\x38\xd7\x23\xbc\x3d\xd8\xe3\x74\xc4\x19\xd6\xc7\xd8\xcd\x5e\x5e\x59\xc7\xb4\x47\x66\xf5\x74\xe7\xdd\xf8\x0f\x87\x10\x3a\xd4\x42\x2f\xee\xb8\xb8\x43\x36\x7b\xd3\x64\xcf\x22\xea\x03\xb4\xf6\xfc\x7a\x6c\x6f\x7f\x22\x5a\xc7\x3c\x21\xa9\x52\x52\xe1\xbb\x5e\xc0\x81\x19\x8d\xa3\x41\xfb\xad\x62\x5d\xf6\x59\xb7\x6b\x4a\xc0\x67\x9f\x3f\x5f\x38\xc3\x5e\x1d\xdb\x78\x31\xf6\xbb\xe5\xac\xff\x8a\x68\x43\xfb\x07\x95\x69\x99\x56\x42\x90\x82\x26\x25\xaf\xb4\xdf\x1c\x8e\xc6\x9c\x95\x91\x24\x2a\x19\xd4\xd8\xee\x02\x55\xc3\xb2\xb1\xa7\xaf\xbf\x06\xef\xfe\x6c\xb9\xbc\xa8\x4d\xa2\x04\xef\x7e\xf6\x6a\x09\xf5\xd5\x57\xe0\xdd\x9f\x3a\x03\x69\x54\x28\x48\x5c\x09\x36\xb5\xe2\x3d\x28\xa3\x58\x96\x33\x48\xa5\x82\x97\xa7\x5f\x01\xbe\xf4\x4b\x54\xbb\x03\x30\xae\x3d\x63\x3a\x84\x70\xcb\x11\x5a\x56\x73\x4c\x3c\x84\x70\x02\x0b\x38\x8b\x9f\xaf\x82\x73\x09\x10\x64\xbc\xa2\xed\x5b\x08\xa3\x72\xed\x3c\xde\x6c\xc4\x4c\x21\x8c\xc4\x5a\xcc\xa4\xc5\xd8\xc5\xc7\xb2\xa5\xbe\xb4\x5d\x21\x8d\x21\x8c\x92\x05\x52\x4a\x44\x73\x30\xbe\xd3\x36\x83\xbb\xef\xf1\xe0\x7d\x7b\x88\x30\x84\x50\xc8\x7c\x3f\x56\x75\x05\x33\x61\xc6\x5e\x05\xc3\xc4\x7d\xaf\xda\x59\x08\x2d\xaf\x6d\x68\x99\x0c\x5f\x2f\x02\x2f\x6a\xe0\xc5\x22\x90\xd7\x40\xbe\x08\xcc\x6b\x60\xee\x3e\xaa\x41\x28\xee\x57\x41\x98\x30\x84\x89\xe6\x72\xf3\x58\x26\x14\x48\x8a\xe6\x69\xaf\xc0\x51\x99\x21\x60\x11\xb2\xdf\x71\x1b\x06\xfb\xd9\xd8\x3d\x0e\x61\x98\x8d\xdd\x75\xb8\x1c\x37\x0e\x02\x11\x97\xf1\x45\x67\xdc\x88\xfe\x29\x84\x05\xf8\xc3\xfb\x0f\x71\xb5\xb2\xf1\x00\x07\x37\xb8\xdf\xb3\xb8\xfd\xe0\xd1\x1c\xd7\xd4\x41\x4d\x79\xe3\x2e\x15\xa4\xc0\x32\xff\xb3\x2a\x5a\x58\xd1\xba\xb2\x91\x10\xf6\xea\x8f\xb7\xea\xfd\xf8\xb8\x1d\xcb\xfc\xa3\x1d\x77\x3a\xfb\xbf\xfe\xd1\xce\x11\x11\xd9\x0d\x3e\xd9\xf9\x10\x9b\xf6\xa3\xdd\xff\x8b\x9f\xff\xb8\x86\x79\xcc\x9a\x4d\xba\xe9\x27\x40\x27\xf1\xfb\x3f\xff\x41\xfc\xed\x1d\x5b\x1d\x48\x31\xa6\x82\x51\x11\x53\x18\x13\xc5\x50\xd3\x5b\xe8\xb8\x97\xae\xc2\x16\x0f\xff\x16\xee\x8f\x66\x45\x24\xb9\x6e\xab\xc3\x15\x8c\xcb\xab\xf5\x4a\xac\xe7\xd1\xde\xa6\x8d\x52\x29\xcc\x1a\x5e\xeb\xae\xbf\x38\x4d\xcd\x48\xd3\x12\x4b\x4f\xf0\x6f\x3c\x82\xf0\x76\xd4\xb7\x2b\xa3\x46\x2d\xd3\xf6\x6f\x00\xfe\xbb\x3f\xff\x97\x0d\x94\x0d\xb3\x86\xf2\xdf\xfe\x75\x95\x50\x61\x3c\x5f\xe2\x89\x2c\xff\xe2\x8f\x36\x51\x2e\xf2\x44\x96\x7f\xf7\xde\xb9\xd5\x37\x8c\xa5\xa2\x29\x9b\xb6\xdc\xff\xf6\x9f\x7d\xf0\xde\x7d\xff\x9b\x2e\xbc\xfb\xfe\xb7\x5d\x78\xf7\xeb\x5f\xbe\x8f\x07\x9a\xba\x14\x7c\x76\xc7\xed\x58\xcd\xe3\x57\x7f\xf9\x5e\xc1\xf8\xee\xea\xed\x46\x38\x2a\xbb\xba\x50\x8b\x63\x6c\x62\x9f\x4b\x71\x82\xfe\xf3\x8f\x57\x57\xa2\x36\x9d\x1e\xbe\x08\xd5\xcc\xea\xcf\x7e\xb5\x99\xd2\xad\x43\x43\xf9\xeb\x5f\x6e\xa6\xb4\x4a\xdc\x44\xf8\x12\xe1\xbf\x7f\x7f\x43\xc2\x77\x7f\xfa\xdb\xcd\x94\xf3\xbb\x01\x24\xfd\x8f\xef\xfd\xe5\xef\x53\x6e\x68\xed\xbf\xfb\xc5\xdf\xff\xb7\xec\xfd\x77\xbf\xf8\x07\xdf\x7d\xef\xd2\x3a\x1c\xd4\x9a\x6d\x76\x84\x0d\xf2\x46\x6b\x99\x6f\xb6\x7d\x4b\xf1\x8f\x1f\xb2\x79\x4b\xf5\x4f\x1f\xdc\x65\x4b\xf6\x57\x9b\xc9\x1a\x83\x76\x84\x7f\xf3\x41\xfb\xb2\x64\x7f\xdd\x7c\x63\xfc\x5f\x01\x00\x00\xff\xff\x5c\x14\x1d\x88\x3d\x35\x00\x00")

func bindataVimtemplateVimrcBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrc,
		"vim_template/vimrc",
	)
}



func bindataVimtemplateVimrc() (*asset, error) {
	bytes, err := bindataVimtemplateVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc",
		size: 13629,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600211012, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrcLocalBundlesExample = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8e\x41\xce\x82\x40\x0c\x46\xf7\x73\x8a\x2f\xb3\xe1\xff\x8d\x89\x7b\x4f\xe1\xc2\x0b\x14\xa9\xc3\xc4\x42\x49\xa7\x88\xdc\xde\x0c\x26\x26\xee\xe9\xf6\xb5\x7d\x2f\x1e\xf6\x9c\x10\x23\x2e\x32\x27\xcc\x85\x0d\x79\x2c\x4e\x22\x98\xe8\xf6\xa0\xc4\x25\xec\x2c\x0b\x11\x57\x05\x75\x1d\xf8\xe5\x46\x5f\x0f\x5c\xf1\xcc\xc3\x71\x43\xde\xf3\x80\x96\x45\x97\x10\xc1\x09\x7f\x77\x35\xa4\xec\xfd\xdc\xfe\x9f\xeb\x8b\xad\xb7\xa9\xc1\x27\xe3\x49\x4b\x76\xb5\xb5\xa9\x44\xed\xb3\x4d\xe3\xba\xf4\x6c\x0c\x96\xc2\x3f\x47\x26\x4d\x78\x07\x00\x00\xff\xff\x88\xe7\x4d\x4d\x42\x01\x00\x00")

func bindataVimtemplateVimrcLocalBundlesExampleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrcLocalBundlesExample,
		"vim_template/vimrc.local.bundles.example",
	)
}



func bindataVimtemplateVimrcLocalBundlesExample() (*asset, error) {
	bytes, err := bindataVimtemplateVimrcLocalBundlesExampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc.local.bundles.example",
		size: 322,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrcLocalExample = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\xf0\xad\x74\xce\xcf\x4b\xe3\xca\x49\x2d\x51\x48\xb7\x2a\xce\xcb\x2c\x28\x8e\x4f\x2c\x2d\xc9\xc8\x2f\x52\xb0\x55\x50\x8a\xcc\x2f\x55\xf0\x4b\xcc\x4d\x55\xe2\x02\x04\x00\x00\xff\xff\x5c\xd4\x81\xc1\x29\x00\x00\x00")

func bindataVimtemplateVimrcLocalExampleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrcLocalExample,
		"vim_template/vimrc.local.example",
	)
}



func bindataVimtemplateVimrcLocalExample() (*asset, error) {
	bytes, err := bindataVimtemplateVimrcLocalExampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc.local.example",
		size: 41,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1600209746, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"vim_template/frameworks/vuejs/vuejs.bundle":      bindataVimtemplateFrameworksVuejsVuejsBundle,
	"vim_template/frameworks/vuejs/vuejs.vim":         bindataVimtemplateFrameworksVuejsVuejsVim,
	"vim_template/langs/c/c.bundle":                   bindataVimtemplateLangsCCBundle,
	"vim_template/langs/c/c.vim":                      bindataVimtemplateLangsCCVim,
	"vim_template/langs/elixir/elixir.bundle":         bindataVimtemplateLangsElixirElixirBundle,
	"vim_template/langs/elixir/elixir.vim":            bindataVimtemplateLangsElixirElixirVim,
	"vim_template/langs/elm/elm.bundle":               bindataVimtemplateLangsElmElmBundle,
	"vim_template/langs/elm/elm.vim":                  bindataVimtemplateLangsElmElmVim,
	"vim_template/langs/erlang/erlang.bundle":         bindataVimtemplateLangsErlangErlangBundle,
	"vim_template/langs/erlang/erlang.vim":            bindataVimtemplateLangsErlangErlangVim,
	"vim_template/langs/go/go.bundle":                 bindataVimtemplateLangsGoGoBundle,
	"vim_template/langs/go/go.vim":                    bindataVimtemplateLangsGoGoVim,
	"vim_template/langs/haskell/haskell.bundle":       bindataVimtemplateLangsHaskellHaskellBundle,
	"vim_template/langs/haskell/haskell.sh":           bindataVimtemplateLangsHaskellHaskellSh,
	"vim_template/langs/haskell/haskell.vim":          bindataVimtemplateLangsHaskellHaskellVim,
	"vim_template/langs/html/html.bundle":             bindataVimtemplateLangsHtmlHtmlBundle,
	"vim_template/langs/html/html.vim":                bindataVimtemplateLangsHtmlHtmlVim,
	"vim_template/langs/javascript/javascript.bundle": bindataVimtemplateLangsJavascriptJavascriptBundle,
	"vim_template/langs/javascript/javascript.vim":    bindataVimtemplateLangsJavascriptJavascriptVim,
	"vim_template/langs/lisp/lisp.bundle":             bindataVimtemplateLangsLispLispBundle,
	"vim_template/langs/lisp/lisp.vim":                bindataVimtemplateLangsLispLispVim,
	"vim_template/langs/lua/lua.bundle":               bindataVimtemplateLangsLuaLuaBundle,
	"vim_template/langs/lua/lua.vim":                  bindataVimtemplateLangsLuaLuaVim,
	"vim_template/langs/ocaml/ocaml.bundle":           bindataVimtemplateLangsOcamlOcamlBundle,
	"vim_template/langs/ocaml/ocaml.vim":              bindataVimtemplateLangsOcamlOcamlVim,
	"vim_template/langs/perl/perl.bundle":             bindataVimtemplateLangsPerlPerlBundle,
	"vim_template/langs/perl/perl.vim":                bindataVimtemplateLangsPerlPerlVim,
	"vim_template/langs/php/php.bundle":               bindataVimtemplateLangsPhpPhpBundle,
	"vim_template/langs/php/php.vim":                  bindataVimtemplateLangsPhpPhpVim,
	"vim_template/langs/python/python.bundle":         bindataVimtemplateLangsPythonPythonBundle,
	"vim_template/langs/python/python.vim":            bindataVimtemplateLangsPythonPythonVim,
	"vim_template/langs/ruby/ruby.bundle":             bindataVimtemplateLangsRubyRubyBundle,
	"vim_template/langs/ruby/ruby.vim":                bindataVimtemplateLangsRubyRubyVim,
	"vim_template/langs/rust/rust.bundle":             bindataVimtemplateLangsRustRustBundle,
	"vim_template/langs/rust/rust.vim":                bindataVimtemplateLangsRustRustVim,
	"vim_template/langs/scala/scala.bundle":           bindataVimtemplateLangsScalaScalaBundle,
	"vim_template/langs/scala/scala.vim":              bindataVimtemplateLangsScalaScalaVim,
	"vim_template/langs/typescript/typescript.bundle": bindataVimtemplateLangsTypescriptTypescriptBundle,
	"vim_template/langs/typescript/typescript.vim":    bindataVimtemplateLangsTypescriptTypescriptVim,
	"vim_template/themes/codedark/codedark.bundle":    bindataVimtemplateThemesCodedarkCodedarkBundle,
	"vim_template/themes/codedark/codedark.vim":       bindataVimtemplateThemesCodedarkCodedarkVim,
	"vim_template/themes/dracula/dracula.bundle":      bindataVimtemplateThemesDraculaDraculaBundle,
	"vim_template/themes/dracula/dracula.vim":         bindataVimtemplateThemesDraculaDraculaVim,
	"vim_template/themes/molokai/molokai.bundle":      bindataVimtemplateThemesMolokaiMolokaiBundle,
	"vim_template/themes/molokai/molokai.vim":         bindataVimtemplateThemesMolokaiMolokaiVim,
	"vim_template/vimrc":                              bindataVimtemplateVimrc,
	"vim_template/vimrc.local.bundles.example":        bindataVimtemplateVimrcLocalBundlesExample,
	"vim_template/vimrc.local.example":                bindataVimtemplateVimrcLocalExample,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"vim_template": {Func: nil, Children: map[string]*bintree{
		"frameworks": {Func: nil, Children: map[string]*bintree{
			"vuejs": {Func: nil, Children: map[string]*bintree{
				"vuejs.bundle": {Func: bindataVimtemplateFrameworksVuejsVuejsBundle, Children: map[string]*bintree{}},
				"vuejs.vim": {Func: bindataVimtemplateFrameworksVuejsVuejsVim, Children: map[string]*bintree{}},
			}},
		}},
		"langs": {Func: nil, Children: map[string]*bintree{
			"c": {Func: nil, Children: map[string]*bintree{
				"c.bundle": {Func: bindataVimtemplateLangsCCBundle, Children: map[string]*bintree{}},
				"c.vim": {Func: bindataVimtemplateLangsCCVim, Children: map[string]*bintree{}},
			}},
			"elixir": {Func: nil, Children: map[string]*bintree{
				"elixir.bundle": {Func: bindataVimtemplateLangsElixirElixirBundle, Children: map[string]*bintree{}},
				"elixir.vim": {Func: bindataVimtemplateLangsElixirElixirVim, Children: map[string]*bintree{}},
			}},
			"elm": {Func: nil, Children: map[string]*bintree{
				"elm.bundle": {Func: bindataVimtemplateLangsElmElmBundle, Children: map[string]*bintree{}},
				"elm.vim": {Func: bindataVimtemplateLangsElmElmVim, Children: map[string]*bintree{}},
			}},
			"erlang": {Func: nil, Children: map[string]*bintree{
				"erlang.bundle": {Func: bindataVimtemplateLangsErlangErlangBundle, Children: map[string]*bintree{}},
				"erlang.vim": {Func: bindataVimtemplateLangsErlangErlangVim, Children: map[string]*bintree{}},
			}},
			"go": {Func: nil, Children: map[string]*bintree{
				"go.bundle": {Func: bindataVimtemplateLangsGoGoBundle, Children: map[string]*bintree{}},
				"go.vim": {Func: bindataVimtemplateLangsGoGoVim, Children: map[string]*bintree{}},
			}},
			"haskell": {Func: nil, Children: map[string]*bintree{
				"haskell.bundle": {Func: bindataVimtemplateLangsHaskellHaskellBundle, Children: map[string]*bintree{}},
				"haskell.sh": {Func: bindataVimtemplateLangsHaskellHaskellSh, Children: map[string]*bintree{}},
				"haskell.vim": {Func: bindataVimtemplateLangsHaskellHaskellVim, Children: map[string]*bintree{}},
			}},
			"html": {Func: nil, Children: map[string]*bintree{
				"html.bundle": {Func: bindataVimtemplateLangsHtmlHtmlBundle, Children: map[string]*bintree{}},
				"html.vim": {Func: bindataVimtemplateLangsHtmlHtmlVim, Children: map[string]*bintree{}},
			}},
			"javascript": {Func: nil, Children: map[string]*bintree{
				"javascript.bundle": {Func: bindataVimtemplateLangsJavascriptJavascriptBundle, Children: map[string]*bintree{}},
				"javascript.vim": {Func: bindataVimtemplateLangsJavascriptJavascriptVim, Children: map[string]*bintree{}},
			}},
			"lisp": {Func: nil, Children: map[string]*bintree{
				"lisp.bundle": {Func: bindataVimtemplateLangsLispLispBundle, Children: map[string]*bintree{}},
				"lisp.vim": {Func: bindataVimtemplateLangsLispLispVim, Children: map[string]*bintree{}},
			}},
			"lua": {Func: nil, Children: map[string]*bintree{
				"lua.bundle": {Func: bindataVimtemplateLangsLuaLuaBundle, Children: map[string]*bintree{}},
				"lua.vim": {Func: bindataVimtemplateLangsLuaLuaVim, Children: map[string]*bintree{}},
			}},
			"ocaml": {Func: nil, Children: map[string]*bintree{
				"ocaml.bundle": {Func: bindataVimtemplateLangsOcamlOcamlBundle, Children: map[string]*bintree{}},
				"ocaml.vim": {Func: bindataVimtemplateLangsOcamlOcamlVim, Children: map[string]*bintree{}},
			}},
			"perl": {Func: nil, Children: map[string]*bintree{
				"perl.bundle": {Func: bindataVimtemplateLangsPerlPerlBundle, Children: map[string]*bintree{}},
				"perl.vim": {Func: bindataVimtemplateLangsPerlPerlVim, Children: map[string]*bintree{}},
			}},
			"php": {Func: nil, Children: map[string]*bintree{
				"php.bundle": {Func: bindataVimtemplateLangsPhpPhpBundle, Children: map[string]*bintree{}},
				"php.vim": {Func: bindataVimtemplateLangsPhpPhpVim, Children: map[string]*bintree{}},
			}},
			"python": {Func: nil, Children: map[string]*bintree{
				"python.bundle": {Func: bindataVimtemplateLangsPythonPythonBundle, Children: map[string]*bintree{}},
				"python.vim": {Func: bindataVimtemplateLangsPythonPythonVim, Children: map[string]*bintree{}},
			}},
			"ruby": {Func: nil, Children: map[string]*bintree{
				"ruby.bundle": {Func: bindataVimtemplateLangsRubyRubyBundle, Children: map[string]*bintree{}},
				"ruby.vim": {Func: bindataVimtemplateLangsRubyRubyVim, Children: map[string]*bintree{}},
			}},
			"rust": {Func: nil, Children: map[string]*bintree{
				"rust.bundle": {Func: bindataVimtemplateLangsRustRustBundle, Children: map[string]*bintree{}},
				"rust.vim": {Func: bindataVimtemplateLangsRustRustVim, Children: map[string]*bintree{}},
			}},
			"scala": {Func: nil, Children: map[string]*bintree{
				"scala.bundle": {Func: bindataVimtemplateLangsScalaScalaBundle, Children: map[string]*bintree{}},
				"scala.vim": {Func: bindataVimtemplateLangsScalaScalaVim, Children: map[string]*bintree{}},
			}},
			"typescript": {Func: nil, Children: map[string]*bintree{
				"typescript.bundle": {Func: bindataVimtemplateLangsTypescriptTypescriptBundle, Children: map[string]*bintree{}},
				"typescript.vim": {Func: bindataVimtemplateLangsTypescriptTypescriptVim, Children: map[string]*bintree{}},
			}},
		}},
		"themes": {Func: nil, Children: map[string]*bintree{
			"codedark": {Func: nil, Children: map[string]*bintree{
				"codedark.bundle": {Func: bindataVimtemplateThemesCodedarkCodedarkBundle, Children: map[string]*bintree{}},
				"codedark.vim": {Func: bindataVimtemplateThemesCodedarkCodedarkVim, Children: map[string]*bintree{}},
			}},
			"dracula": {Func: nil, Children: map[string]*bintree{
				"dracula.bundle": {Func: bindataVimtemplateThemesDraculaDraculaBundle, Children: map[string]*bintree{}},
				"dracula.vim": {Func: bindataVimtemplateThemesDraculaDraculaVim, Children: map[string]*bintree{}},
			}},
			"molokai": {Func: nil, Children: map[string]*bintree{
				"molokai.bundle": {Func: bindataVimtemplateThemesMolokaiMolokaiBundle, Children: map[string]*bintree{}},
				"molokai.vim": {Func: bindataVimtemplateThemesMolokaiMolokaiVim, Children: map[string]*bintree{}},
			}},
		}},
		"vimrc": {Func: bindataVimtemplateVimrc, Children: map[string]*bintree{}},
		"vimrc.local.bundles.example": {Func: bindataVimtemplateVimrcLocalBundlesExample, Children: map[string]*bintree{}},
		"vimrc.local.example": {Func: bindataVimtemplateVimrcLocalExample, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
